{"version":3,"sources":["base.js","base64shim.js","crypto-jsbn-2012-08-09_1.js","crypto-sjcl-1.3.0_1.js","SecureRandom.js","Oaep.js","Pss.js","Utils.js","EncodingConverter.js","AesInterface.js","SjclAes128CbcAsync.js","SjclAes256GcmAsync.js"],"names":["tutao","global","this","provide","name","parts","split","cur","execScript","part","length","shift","Object","create","proto","props","F","prototype","base64encode","str","out","i","len","c1","c2","c3","charCodeAt","base64EncodeChars","charAt","base64decode","c4","base64DecodeChars","String","fromCharCode","Array","btoa","atob","BigInteger","a","b","c","fromNumber","fromString","nbi","am1","x","w","j","n","v","Math","floor","am2","xl","xh","l","h","m","am3","int2char","BI_RM","intAt","s","BI_RC","bnpCopyTo","r","t","bnpFromInt","DV","nbv","fromInt","bnpFromString","k","fromRadix","mi","sh","DB","clamp","ZERO","subTo","bnpClamp","DM","bnToString","negate","toString","toRadix","d","km","p","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","y","am","bnpSquareTo","bnpDivRemTo","q","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","F1","F2","d1","FV","d2","e","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","mod","cRevert","cReduce","cMulTo","multiplyTo","reduce","cSqrTo","squareTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","g","convert","sqrTo","mulTo","revert","bnModPowInt","isEven","exp","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","LN2","log","bnSigNum","bnpToRadix","signum","cs","chunkSize","pow","intValue","substr","bnpFromRadix","dMultiply","dAddOffset","bnpFromNumber","testBit","bitwiseTo","shiftLeft","op_or","isProbablePrime","bitLength","nextBytes","bnToByteArray","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","f","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","changeBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","divide","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","xHex","eHex","mHex","result","powMod","str2bigInt","bigInt2str","bnGCD","clone","getLowestSetBit","bnpModInt","bnModInverse","ac","u","subtract","add","bnIsProbablePrime","lowprimes","lplim","modInt","millerRabin","bnpMillerRabin","n1","shiftRight","random","modPow","modPowInt","parseBigInt","linebrk","ret","substring","byte2Hex","pkcs1pad2","alert","ba","rng","SecureRandom","RSAKey","dmp1","dmq1","coeff","RSASetPublic","N","E","parseInt","RSADoPublic","RSAEncrypt","text","doPublic","pkcs1unpad2","toByteArray","RSASetPrivate","D","RSASetPrivateEx","P","Q","DP","DQ","C","RSAGenerate","B","qs","ee","gcd","p1","q1","phi","multiply","modInverse","RSADoPrivate","xp","xq","RSADecrypt","ctext","doPrivate","findPrimes","ans","millerRabinInt","mr_x1","dup","mr_r","mr_a","copyInt_","copy_","addInt_","mask","bpe","rightShift_","powMod_","equalsInt","equals","squareMod_","bitSize","expand","int2bigInt","randTruePrime","randTruePrime_","trim","randProbPrime","randProbPrimeRounds","divisible","primes","rpprb","randBigInt_","greater","mod_","addInt","mult","mult_","sub","sub_","add_","inverseMod","inverseMod_","multMod","multMod_","randBigInt","GCD","xc","yc","GCD_","yp","A","sing","T","qp","linComb_","eg_u","eg_v","eg_A","eg_B","eg_C","eg_D","halve_","negative","inverseModInt","inverseModInt_","eGCD_","multInt_","leftShift_","greaterShift","kx","ky","divide_","y1","y2","subShift_","radix","linCombShift_","addShift_","carry_","bits","minSize","ceil","buff","base","kk","indexOf","digitsStr","isZero","s6","divInt_","ss","s4","s5","s0","k1","k2","kn","np","s7","s3","mont_","one","ui","ks","sa","dbits","canary","j_lm","navigator","appName","BI_FP","rr","vv","byteValue","shortValue","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","remainder","divideAndRemainder","square","setPublic","encrypt","setPrivate","setPrivateEx","generate","decrypt","s1","s2","md_q1","md_q2","md_q3","md_r","md_r1","md_r2","md_tt","pows","s_i","s_i2","s_R","s_rm","s_q","s_n1","s_a","s_r2","s_n","s_b","s_d","s_x1","s_x2","s_aa","sjcl","cipher","hash","keyexchange","mode","misc","codec","exception","corrupt","message","invalid","bug","notReady","module","exports","define","aes","key","_tables","_precompute","tmp","encKey","decKey","sbox","decTable","keyLen","rcon","_key","slice","data","_crypt","xInv","x2","x4","x8","tEnc","tDec","encTable","sboxInv","th","input","dir","a2","b2","nInnerRounds","kIndex","table","t0","t1","t2","t3","bitArray","bitSlice","bstart","bend","_shiftRight","undefined","extract","blength","concat","a1","last","getPartial","partial","_end","round","equal","carry","shift2","last2","push","pop","_xor4","byteswapM","utf8String","fromBits","arr","bl","charCode","Number","decodeURIComponent","escape","toBits","unescape","encodeURIComponent","hex","replace","base64","_chars","_noEquals","_url","ta","base64url","bytes","sha256","_h","_buffer","_length","reset","update","finalize","blockSize","_init","ol","nl","_block","splice","frac","factor","prime","outer","words","h0","h1","h2","h3","h4","h5","h6","h7","beware","cbc","prp","plaintext","iv","adata","usePadding","bp","output","ciphertext","bi","bo","gcm","prf","tlen","_ctrMode","tag","_galoisMultiply","xi","Zi","Vi","lsb_Vi","_ghash","H","Y0","Yi","J0","S0","enc","ctr","abl","ivbl","hmac","Hash","_hash","exKey","_baseHash","_resultHash","mac","_updated","digest","prng","defaultParanoia","_pools","_poolEntropy","_reseedCount","_robins","_eventId","_collectorIds","_collectorIdNext","_strength","_poolStrength","_nextReseed","_counter","_cipher","_defaultParanoia","_collectorsStarted","_callbacks","progress","seeded","_callbackI","_NOT_READY","_READY","_REQUIRES_RESEED","_MAX_WORDS_PER_BURST","_PARANOIA_LEVELS","_MILLISECONDS_PER_RESEED","_BITS_PER_RESEED","randomWords","nwords","paranoia","readiness","isReady","_reseedFromPools","_gate","_gen4words","setDefaultParanoia","allowZeroParanoia","addEntropy","estimatedEntropy","source","id","objName","Date","valueOf","robin","err","call","entropyRequired","getProgress","startCollectors","_eventListener","loadTimeCollector","_bind","_loadTimeCollector","mouseCollector","_mouseCollector","keyboardCollector","_keyboardCollector","accelerometerCollector","_accelerometerCollector","touchCollector","_touchCollector","window","addEventListener","document","attachEvent","stopCollectors","removeEventListener","detachEvent","callback","cb","jsTemp","hasOwnProperty","func","that","apply","arguments","_reseed","seedWords","full","reseedData","strength","_addCurrentTimeToEntropy","ev","clientX","offsetX","clientY","offsetY","touch","touches","changedTouches","pageX","pageY","performance","now","accelerationIncludingGravity","orientation","_fireEvent","arg","cbsTemp","globals","ArrayBuffer","DataView","arrayBuffer","padding","padding_count","smallest","setUint32","byteLength","buffer","setUint8","getUint8","inView","getUint32","hexDumpBuffer","stringBufferView","string","pad","width","join","getUint16","console","toUpperCase","_nextBytes","array","Error","setNextRandomBytes","crypto","Oaep","utils","Utils","value","keyLength","seed","hashLength","block","_getPSBlock","dbMask","mgf1","seedMask","unpad","index","blockLength","defHash","nbrOfZeros","Pss","encode","salt","emLen","emBits","minEmBitsLength","messageHash","message2","message2Hash","ps","db","_clear","expectedDbLength","maskedDb","em","verify","encodedMessage","saltLength","minEncodedLength","maskedDB","util","ArrayUtils","arrayEquals","counter","seedSjclArray","i2osp","cSjclArray","PADDING_BLOCK_LENGTH","paddingLength","Uint8Array","fill","CryptoError","set","subarray","bytes1","bytes2","dstBuffer","createAuthVerifier","passwordKey","EncodingConverter","uint8ArrayToBase64","locator","shaCrypter","keyToUint8Array","checkIs128BitKey","uint8ArrayToKey","uint8Array","keyToBase64","base64ToKey","hexToBase64","base64ToHex","base64ToBase64Url","base64ToBase64Ext","base64Alphabet","base64extAlphabet","base64ext","timestampToHexGeneratedId","timestamp","timestampToGeneratedId","base64UrlToBase64","nbrOfRemainingChars","stringToUtf8Uint8Array","utf8","utf8Uint8ArrayToString","hexToUint8Array","bufView","uint8ArrayToHex","hexDigits","binary","base64ToUint8Array","map","AesInterface","IV_BYTE_LENGTH","IV_BIT_LENGTH","TAG_BYTE_LENGTH","TAG_BIT_LENGTH","generateRandomKey","encryptUtf8","decryptUtf8","encryptUtf8Index","decryptUtf8Index","encryptBytes","decryptBytes","encryptKey","decryptKey","encryptPrivateRsaKey","decryptPrivateRsaKey","SjclAes128CbcAsync","_byteKeyLength","randomIv","resultCallback","uint32ArraysPerBlock","nbrOfFullSrcBlocks","srcDataView","dstDataView","_int32ToUint32","plainBlock","dstBlockOffset","srcDataViewLastBlock","nbrOfRemainingSrcBytes","paddingByte","dstLastBlockOffset","type","msg","decryptedBytesLength","decryptedBlock","encryptedBlock","lastSrcBlock","nbrOfPaddingBytes","SjclAes256GcmAsync","paddedBytes","encrypted","encryptedWords","error","decrypted","decryptedBytes","unpaddedBytes"],"mappings":"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","file":"worker.min.js","sourcesContent":["var tutao = typeof tutao != 'undefined' ? tutao : {};\n\ntutao.global = this;\n\n/**\n * Adapted from goog.exportPath_\n * \n * Builds an object structure for the provided namespace path,\n * ensuring that names that already exist are not overwritten. For\n * example:\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\n * @param {string} name name of the object that this file defines.\n */\ntutao.provide = function(name) {\n    var parts = name.split('.');\n    var cur = tutao.global;\n\n    // Internet Explorer exhibits strange behavior when throwing errors from\n    // methods externed in this manner.  See the testExportSymbolExceptions in\n    // base_test.html for an example.\n    if (!(parts[0] in cur) && cur.execScript) {\n        cur.execScript('var ' + parts[0]);\n    }\n\n    // Certain browsers cannot parse code in the form for((a in b); c;);\n    // This pattern is produced by the JSCompiler when it collapses the\n    // statement above into the conditional loop below. To prevent this from\n    // happening, use a for-loop and reserve the init logic as below.\n\n    // Parentheses added to eliminate strict JS warning in Firefox.\n    for (var part; parts.length && (part = parts.shift());) {\n        if (cur[part]) {\n            cur = cur[part];\n        } else {\n            cur = cur[part] = {};\n        }\n    }\n};\n\nif (!Object.create) {\n    Object.create = function(proto, props) {\n        if (typeof props !== \"undefined\") {\n            throw \"The multiple-argument version of Object.create is not provided by this browser and cannot be shimmed.\";\n        }\n        function F() { }\n        F.prototype = proto;\n        return new F();\n    };\n}","/* Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */\n\n/*\n * Interfaces:\n * b64 = base64encode(data);\n * data = base64decode(b64);\n */\n\n(function() {\n\n    var base64EncodeChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var base64DecodeChars = new Array(\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,\n        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,\n        -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,\n        -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);\n\n    function base64encode(str) {\n        var out, i, len;\n        var c1, c2, c3;\n\n        len = str.length;\n        i = 0;\n        out = \"\";\n        while(i < len) {\n            c1 = str.charCodeAt(i++) & 0xff;\n            if(i == len)\n            {\n                out += base64EncodeChars.charAt(c1 >> 2);\n                out += base64EncodeChars.charAt((c1 & 0x3) << 4);\n                out += \"==\";\n                break;\n            }\n            c2 = str.charCodeAt(i++);\n            if(i == len)\n            {\n                out += base64EncodeChars.charAt(c1 >> 2);\n                out += base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));\n                out += base64EncodeChars.charAt((c2 & 0xF) << 2);\n                out += \"=\";\n                break;\n            }\n            c3 = str.charCodeAt(i++);\n            out += base64EncodeChars.charAt(c1 >> 2);\n            out += base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));\n            out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >>6));\n            out += base64EncodeChars.charAt(c3 & 0x3F);\n        }\n        return out;\n    }\n\n    function base64decode(str) {\n        var c1, c2, c3, c4;\n        var i, len, out;\n\n        len = str.length;\n        i = 0;\n        out = \"\";\n        while(i < len) {\n            /* c1 */\n            do {\n                c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];\n            } while(i < len && c1 == -1);\n            if(c1 == -1)\n                break;\n\n            /* c2 */\n            do {\n                c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];\n            } while(i < len && c2 == -1);\n            if(c2 == -1)\n                break;\n\n            out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));\n\n            /* c3 */\n            do {\n                c3 = str.charCodeAt(i++) & 0xff;\n                if(c3 == 61)\n                    return out;\n                c3 = base64DecodeChars[c3];\n            } while(i < len && c3 == -1);\n            if(c3 == -1)\n                break;\n\n            out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));\n\n            /* c4 */\n            do {\n                c4 = str.charCodeAt(i++) & 0xff;\n                if(c4 == 61)\n                    return out;\n                c4 = base64DecodeChars[c4];\n            } while(i < len && c4 == -1);\n            if(c4 == -1)\n                break;\n            out += String.fromCharCode(((c3 & 0x03) << 6) | c4);\n        }\n        return out;\n    }\n\n    if (typeof btoa == 'undefined') btoa = base64encode;\n    if (typeof atob == 'undefined') atob = base64decode;\n\n})();","// Copyright (c) 2005  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n\n// Basic JavaScript BN library - subset useful for RSA encryption.\n\n// Bits per digit\nvar dbits;\n\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = ((canary&0xffffff)==0xefcafe);\n\n// (public) Constructor\n// tutao: a = bitlength (1024)\n//        b = number of miller rabin test * 2\n//        c = SecureRandom\nfunction BigInteger(a,b,c) {\n  if(a != null)\n    if(\"number\" == typeof a) this.fromNumber(a,b,c);\n    else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n    else this.fromString(a,b);\n}\n\n// return new, unset BigInteger\nfunction nbi() { return new BigInteger(null); }\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i,x,w,j,c,n) {\n  while(--n >= 0) {\n    var v = x*this[i++]+w[j]+c;\n    c = Math.floor(v/0x4000000);\n    w[j++] = v&0x3ffffff;\n  }\n  return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i,x,w,j,c,n) {\n  var xl = x&0x7fff, xh = x>>15;\n  while(--n >= 0) {\n    var l = this[i]&0x7fff;\n    var h = this[i++]>>15;\n    var m = xh*l+h*xl;\n    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\n    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n    w[j++] = l&0x3fffffff;\n  }\n  return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i,x,w,j,c,n) {\n  var xl = x&0x3fff, xh = x>>14;\n  while(--n >= 0) {\n    var l = this[i]&0x3fff;\n    var h = this[i++]>>14;\n    var m = xh*l+h*xl;\n    l = xl*l+((m&0x3fff)<<14)+w[j]+c;\n    c = (l>>28)+(m>>14)+xh*h;\n    w[j++] = l&0xfffffff;\n  }\n  return c;\n}\nif(j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n  BigInteger.prototype.am = am2;\n  dbits = 30;\n}\nelse if(j_lm && (navigator.appName != \"Netscape\")) {\n  BigInteger.prototype.am = am1;\n  dbits = 26;\n}\nelse { // Mozilla/Netscape seems to prefer am3\n  BigInteger.prototype.am = am3;\n  dbits = 28;\n}\n\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = ((1<<dbits)-1);\nBigInteger.prototype.DV = (1<<dbits);\n\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2,BI_FP);\nBigInteger.prototype.F1 = BI_FP-dbits;\nBigInteger.prototype.F2 = 2*dbits-BI_FP;\n\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr,vv;\nrr = \"0\".charCodeAt(0);\nfor(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nfunction int2char(n) { return BI_RM.charAt(n); }\nfunction intAt(s,i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return (c==null)?-1:c;\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\n  r.t = this.t;\n  r.s = this.s;\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = (x<0)?-1:0;\n  if(x > 0) this[0] = x;\n  else if(x < -1) this[0] = x+DV;\n  else this.t = 0;\n}\n\n// return bigint initialized to value\nfunction nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\n// (protected) set from string and radix\nfunction bnpFromString(s,b) {\n  var k;\n  if(b == 16) k = 4;\n  else if(b == 8) k = 3;\n  else if(b == 256) k = 8; // byte array\n  else if(b == 2) k = 1;\n  else if(b == 32) k = 5;\n  else if(b == 4) k = 2;\n  else { this.fromRadix(s,b); return; }\n  this.t = 0;\n  this.s = 0;\n  var i = s.length, mi = false, sh = 0;\n  while(--i >= 0) {\n    var x = (k==8)?s[i]&0xff:intAt(s,i);\n    if(x < 0) {\n      if(s.charAt(i) == \"-\") mi = true;\n      continue;\n    }\n    mi = false;\n    if(sh == 0)\n      this[this.t++] = x;\n    else if(sh+k > this.DB) {\n      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n      this[this.t++] = (x>>(this.DB-sh));\n    }\n    else\n      this[this.t-1] |= x<<sh;\n    sh += k;\n    if(sh >= this.DB) sh -= this.DB;\n  }\n  if(k == 8 && (s[0]&0x80) != 0) {\n    this.s = -1;\n    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n  }\n  this.clamp();\n  if(mi) BigInteger.ZERO.subTo(this,this);\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n  var c = this.s&this.DM;\n  while(this.t > 0 && this[this.t-1] == c) --this.t;\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n  if(this.s < 0) return \"-\"+this.negate().toString(b);\n  var k;\n  if(b == 16) k = 4;\n  else if(b == 8) k = 3;\n  else if(b == 2) k = 1;\n  else if(b == 32) k = 5;\n  else if(b == 4) k = 2;\n  else return this.toRadix(b);\n  var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n  var p = this.DB-(i*this.DB)%k;\n  if(i-- > 0) {\n    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\n    while(i >= 0) {\n      if(p < k) {\n        d = (this[i]&((1<<p)-1))<<(k-p);\n        d |= this[--i]>>(p+=this.DB-k);\n      }\n      else {\n        d = (this[i]>>(p-=k))&km;\n        if(p <= 0) { p += this.DB; --i; }\n      }\n      if(d > 0) m = true;\n      if(m) r += int2char(d);\n    }\n  }\n  return m?r:\"0\";\n}\n\n// (public) -this\nfunction bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\n// (public) |this|\nfunction bnAbs() { return (this.s<0)?this.negate():this; }\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n  var r = this.s-a.s;\n  if(r != 0) return r;\n  var i = this.t;\n  r = i-a.t;\n  if(r != 0) return (this.s<0)?-r:r;\n  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\n  return 0;\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n  var r = 1, t;\n  if((t=x>>>16) != 0) { x = t; r += 16; }\n  if((t=x>>8) != 0) { x = t; r += 8; }\n  if((t=x>>4) != 0) { x = t; r += 4; }\n  if((t=x>>2) != 0) { x = t; r += 2; }\n  if((t=x>>1) != 0) { x = t; r += 1; }\n  return r;\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n  if(this.t <= 0) return 0;\n  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n,r) {\n  var i;\n  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\n  for(i = n-1; i >= 0; --i) r[i] = 0;\n  r.t = this.t+n;\n  r.s = this.s;\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n,r) {\n  for(var i = n; i < this.t; ++i) r[i-n] = this[i];\n  r.t = Math.max(this.t-n,0);\n  r.s = this.s;\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n,r) {\n  var bs = n%this.DB;\n  var cbs = this.DB-bs;\n  var bm = (1<<cbs)-1;\n  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n  for(i = this.t-1; i >= 0; --i) {\n    r[i+ds+1] = (this[i]>>cbs)|c;\n    c = (this[i]&bm)<<bs;\n  }\n  for(i = ds-1; i >= 0; --i) r[i] = 0;\n  r[ds] = c;\n  r.t = this.t+ds+1;\n  r.s = this.s;\n  r.clamp();\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n,r) {\n  r.s = this.s;\n  var ds = Math.floor(n/this.DB);\n  if(ds >= this.t) { r.t = 0; return; }\n  var bs = n%this.DB;\n  var cbs = this.DB-bs;\n  var bm = (1<<bs)-1;\n  r[0] = this[ds]>>bs;\n  for(var i = ds+1; i < this.t; ++i) {\n    r[i-ds-1] |= (this[i]&bm)<<cbs;\n    r[i-ds] = this[i]>>bs;\n  }\n  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\n  r.t = this.t-ds;\n  r.clamp();\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a,r) {\n  var i = 0, c = 0, m = Math.min(a.t,this.t);\n  while(i < m) {\n    c += this[i]-a[i];\n    r[i++] = c&this.DM;\n    c >>= this.DB;\n  }\n  if(a.t < this.t) {\n    c -= a.s;\n    while(i < this.t) {\n      c += this[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  }\n  else {\n    c += this.s;\n    while(i < a.t) {\n      c -= a[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c -= a.s;\n  }\n  r.s = (c<0)?-1:0;\n  if(c < -1) r[i++] = this.DV+c;\n  else if(c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a,r) {\n  var x = this.abs(), y = a.abs();\n  var i = x.t;\n  r.t = i+y.t;\n  while(--i >= 0) r[i] = 0;\n  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\n  r.s = 0;\n  r.clamp();\n  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2*x.t;\n  while(--i >= 0) r[i] = 0;\n  for(i = 0; i < x.t-1; ++i) {\n    var c = x.am(i,x[i],r,2*i,0,1);\n    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n      r[i+x.t] -= x.DV;\n      r[i+x.t+1] = 1;\n    }\n  }\n  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\n  r.s = 0;\n  r.clamp();\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m,q,r) {\n  var pm = m.abs();\n  if(pm.t <= 0) return;\n  var pt = this.abs();\n  if(pt.t < pm.t) {\n    if(q != null) q.fromInt(0);\n    if(r != null) this.copyTo(r);\n    return;\n  }\n  if(r == null) r = nbi();\n  var y = nbi(), ts = this.s, ms = m.s;\n  var nsh = this.DB-nbits(pm[pm.t-1]);\t// normalize modulus\n  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\n  else { pm.copyTo(y); pt.copyTo(r); }\n  var ys = y.t;\n  var y0 = y[ys-1];\n  if(y0 == 0) return;\n  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\n  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n  var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n  y.dlShiftTo(j,t);\n  if(r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t,r);\n  }\n  BigInteger.ONE.dlShiftTo(ys,t);\n  t.subTo(y,y);\t// \"negative\" y so we can replace sub with am later\n  while(y.t < ys) y[y.t++] = 0;\n  while(--j >= 0) {\n    // Estimate quotient digit\n    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\n    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {\t// Try it out\n      y.dlShiftTo(j,t);\n      r.subTo(t,r);\n      while(r[i] < --qd) r.subTo(t,r);\n    }\n  }\n  if(q != null) {\n    r.drShiftTo(ys,q);\n    if(ts != ms) BigInteger.ZERO.subTo(q,q);\n  }\n  r.t = ys;\n  r.clamp();\n  if(nsh > 0) r.rShiftTo(nsh,r);\t// Denormalize remainder\n  if(ts < 0) BigInteger.ZERO.subTo(r,r);\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n  var r = nbi();\n  this.abs().divRemTo(a,null,r);\n  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n  return r;\n}\n\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) { this.m = m; }\nfunction cConvert(x) {\n  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n  else return x;\n}\nfunction cRevert(x) { return x; }\nfunction cReduce(x) { x.divRemTo(this.m,null,x); }\nfunction cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\nfunction cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo;\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n  if(this.t < 1) return 0;\n  var x = this[0];\n  if((x&1) == 0) return 0;\n  var y = x&3;\t\t// y == 1/x mod 2^2\n  y = (y*(2-(x&0xf)*y))&0xf;\t// y == 1/x mod 2^4\n  y = (y*(2-(x&0xff)*y))&0xff;\t// y == 1/x mod 2^8\n  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;\t// y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n  y = (y*(2-x*y%this.DV))%this.DV;\t\t// y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n  return (y>0)?this.DV-y:-y;\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp&0x7fff;\n  this.mph = this.mp>>15;\n  this.um = (1<<(m.DB-15))-1;\n  this.mt2 = 2*m.t;\n}\n\n// xR mod m\nfunction montConvert(x) {\n  var r = nbi();\n  x.abs().dlShiftTo(this.m.t,r);\n  r.divRemTo(this.m,null,r);\n  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n  return r;\n}\n\n// x/R mod m\nfunction montRevert(x) {\n  var r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n  while(x.t <= this.mt2)\t// pad x so am has enough room later\n    x[x.t++] = 0;\n  for(var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i]&0x7fff;\n    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n    // use am to combine the multiply-shift-add into one call\n    j = i+this.m.t;\n    x[j] += this.m.am(0,u0,x,i,0,this.m.t);\n    // propagate carry\n    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\n  }\n  x.clamp();\n  x.drShiftTo(this.m.t,x);\n  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n\n// (protected) true iff this is even\nfunction bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\n\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e,z) {\n  if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n  g.copyTo(r);\n  while(--i >= 0) {\n    z.sqrTo(r,r2);\n    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n    else { var t = r; r = r2; r2 = t; }\n  }\n  return z.revert(r);\n}\n\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e,m) {\n  var z;\n  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n  return this.exp(e,z);\n}\n\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\n\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.modPowInt = bnModPowInt;\n\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n\n// Copyright (c) 2005-2009  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n\n// Extended JavaScript BN functions, required for RSA private ops.\n\n// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n// Version 1.2: square() API, isProbablePrime fix\n\n// (public)\nfunction bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\n// (public) return value as integer\nfunction bnIntValue() {\n  if(this.s < 0) {\n    if(this.t == 1) return this[0]-this.DV;\n    else if(this.t == 0) return -1;\n  }\n  else if(this.t == 1) return this[0];\n  else if(this.t == 0) return 0;\n  // assumes 16 < DB < 32\n  return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\n}\n\n// (public) return value as byte\nfunction bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\n\n// (public) return value as short (assumes DB>=16)\nfunction bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\n\n// (protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\n// (public) 0 if this == 0, 1 if this > 0\nfunction bnSigNum() {\n  if(this.s < 0) return -1;\n  else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n  else return 1;\n}\n\n// (protected) convert to radix string\nfunction bnpToRadix(b) {\n  if(b == null) b = 10;\n  if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\n  var cs = this.chunkSize(b);\n  var a = Math.pow(b,cs);\n  var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n  this.divRemTo(d,y,z);\n  while(y.signum() > 0) {\n    r = (a+z.intValue()).toString(b).substr(1) + r;\n    y.divRemTo(d,y,z);\n  }\n  return z.intValue().toString(b) + r;\n}\n\n// (protected) convert from radix string\nfunction bnpFromRadix(s,b) {\n  this.fromInt(0);\n  if(b == null) b = 10;\n  var cs = this.chunkSize(b);\n  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\n  for(var i = 0; i < s.length; ++i) {\n    var x = intAt(s,i);\n    if(x < 0) {\n      if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n      continue;\n    }\n    w = b*w+x;\n    if(++j >= cs) {\n      this.dMultiply(d);\n      this.dAddOffset(w,0);\n      j = 0;\n      w = 0;\n    }\n  }\n  if(j > 0) {\n    this.dMultiply(Math.pow(b,j));\n    this.dAddOffset(w,0);\n  }\n  if(mi) BigInteger.ZERO.subTo(this,this);\n}\n\n// (protected) alternate constructor\n// tutao: on first invocation:\n//        a = bitlength (1024)\n//        b = number of miller rabin test * 2\n//        c = SecureRandom\n//       on second invocation:\n//        a = bitlength (1024)\n//        b = SecureRandom\n//        c == undefined\nfunction bnpFromNumber(a,b,c) {\n  if(\"number\" == typeof b) {\n    // new BigInteger(int,int,RNG)\n    if(a < 2) this.fromInt(1);\n    else {\n      this.fromNumber(a,c);\n      if(!this.testBit(a-1))\t// force MSB set\n        this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n      if(this.isEven()) this.dAddOffset(1,0); // force odd\n      while(!this.isProbablePrime(b)) {\n        this.dAddOffset(2,0);\n        if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n      }\n    }\n  }\n  else {\n    // new BigInteger(int,RNG)\n    var x = new Array(), t = a&7;\n    x.length = (a>>3)+1;\n    b.nextBytes(x);\n    if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n    this.fromString(x,256);\n  }\n}\n\n// (public) convert to bigendian byte array\nfunction bnToByteArray() {\n  var i = this.t, r = new Array();\n  r[0] = this.s;\n  var p = this.DB-(i*this.DB)%8, d, k = 0;\n  if(i-- > 0) {\n    if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\n      r[k++] = d|(this.s<<(this.DB-p));\n    while(i >= 0) {\n      if(p < 8) {\n        d = (this[i]&((1<<p)-1))<<(8-p);\n        d |= this[--i]>>(p+=this.DB-8);\n      }\n      else {\n        d = (this[i]>>(p-=8))&0xff;\n        if(p <= 0) { p += this.DB; --i; }\n      }\n      if((d&0x80) != 0) d |= -256;\n      if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n      if(k > 0 || d != this.s) r[k++] = d;\n    }\n  }\n  return r;\n}\n\nfunction bnEquals(a) { return(this.compareTo(a)==0); }\nfunction bnMin(a) { return(this.compareTo(a)<0)?this:a; }\nfunction bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\n// (protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a,op,r) {\n  var i, f, m = Math.min(a.t,this.t);\n  for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\n  if(a.t < this.t) {\n    f = a.s&this.DM;\n    for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\n    r.t = this.t;\n  }\n  else {\n    f = this.s&this.DM;\n    for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\n    r.t = a.t;\n  }\n  r.s = op(this.s,a.s);\n  r.clamp();\n}\n\n// (public) this & a\nfunction op_and(x,y) { return x&y; }\nfunction bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\n// (public) this | a\nfunction op_or(x,y) { return x|y; }\nfunction bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\n// (public) this ^ a\nfunction op_xor(x,y) { return x^y; }\nfunction bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\n// (public) this & ~a\nfunction op_andnot(x,y) { return x&~y; }\nfunction bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\n// (public) ~this\nfunction bnNot() {\n  var r = nbi();\n  for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\n  r.t = this.t;\n  r.s = ~this.s;\n  return r;\n}\n\n// (public) this << n\nfunction bnShiftLeft(n) {\n  var r = nbi();\n  if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\n  return r;\n}\n\n// (public) this >> n\nfunction bnShiftRight(n) {\n  var r = nbi();\n  if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\n  return r;\n}\n\n// return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n  if(x == 0) return -1;\n  var r = 0;\n  if((x&0xffff) == 0) { x >>= 16; r += 16; }\n  if((x&0xff) == 0) { x >>= 8; r += 8; }\n  if((x&0xf) == 0) { x >>= 4; r += 4; }\n  if((x&3) == 0) { x >>= 2; r += 2; }\n  if((x&1) == 0) ++r;\n  return r;\n}\n\n// (public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\n  for(var i = 0; i < this.t; ++i)\n    if(this[i] != 0) return i*this.DB+lbit(this[i]);\n  if(this.s < 0) return this.t*this.DB;\n  return -1;\n}\n\n// return number of 1 bits in x\nfunction cbit(x) {\n  var r = 0;\n  while(x != 0) { x &= x-1; ++r; }\n  return r;\n}\n\n// (public) return number of set bits\nfunction bnBitCount() {\n  var r = 0, x = this.s&this.DM;\n  for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\n  return r;\n}\n\n// (public) true iff nth bit is set\nfunction bnTestBit(n) {\n  var j = Math.floor(n/this.DB);\n  if(j >= this.t) return(this.s!=0);\n  return((this[j]&(1<<(n%this.DB)))!=0);\n}\n\n// (protected) this op (1<<n)\nfunction bnpChangeBit(n,op) {\n  var r = BigInteger.ONE.shiftLeft(n);\n  this.bitwiseTo(r,op,r);\n  return r;\n}\n\n// (public) this | (1<<n)\nfunction bnSetBit(n) { return this.changeBit(n,op_or); }\n\n// (public) this & ~(1<<n)\nfunction bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\n// (public) this ^ (1<<n)\nfunction bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\n// (protected) r = this + a\nfunction bnpAddTo(a,r) {\n  var i = 0, c = 0, m = Math.min(a.t,this.t);\n  while(i < m) {\n    c += this[i]+a[i];\n    r[i++] = c&this.DM;\n    c >>= this.DB;\n  }\n  if(a.t < this.t) {\n    c += a.s;\n    while(i < this.t) {\n      c += this[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  }\n  else {\n    c += this.s;\n    while(i < a.t) {\n      c += a[i];\n      r[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += a.s;\n  }\n  r.s = (c<0)?-1:0;\n  if(c > 0) r[i++] = c;\n  else if(c < -1) r[i++] = this.DV+c;\n  r.t = i;\n  r.clamp();\n}\n\n// (public) this + a\nfunction bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\n// (public) this - a\nfunction bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\n// (public) this * a\nfunction bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\n// (public) this^2\nfunction bnSquare() { var r = nbi(); this.squareTo(r); return r; }\n\n// (public) this / a\nfunction bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\n// (public) this % a\nfunction bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\n// (public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\n  var q = nbi(), r = nbi();\n  this.divRemTo(a,q,r);\n  return new Array(q,r);\n}\n\n// (protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\n  this[this.t] = this.am(0,n-1,this,0,0,this.t);\n  ++this.t;\n  this.clamp();\n}\n\n// (protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n,w) {\n  if(n == 0) return;\n  while(this.t <= w) this[this.t++] = 0;\n  this[w] += n;\n  while(this[w] >= this.DV) {\n    this[w] -= this.DV;\n    if(++w >= this.t) this[this.t++] = 0;\n    ++this[w];\n  }\n}\n\n// A \"null\" reducer\nfunction NullExp() {}\nfunction nNop(x) { return x; }\nfunction nMulTo(x,y,r) { x.multiplyTo(y,r); }\nfunction nSqrTo(x,r) { x.squareTo(r); }\n\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo;\n\n// (public) this^e\nfunction bnPow(e) { return this.exp(e,new NullExp()); }\n\n// (protected) r = lower n words of \"this * a\", a.t <= n\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a,n,r) {\n  var i = Math.min(this.t+a.t,n);\n  r.s = 0; // assumes a,this >= 0\n  r.t = i;\n  while(i > 0) r[--i] = 0;\n  var j;\n  for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\n  for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\n  r.clamp();\n}\n\n// (protected) r = \"this * a\" without lower n words, n > 0\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a,n,r) {\n  --n;\n  var i = r.t = this.t+a.t-n;\n  r.s = 0; // assumes a,this >= 0\n  while(--i >= 0) r[i] = 0;\n  for(i = Math.max(n-this.t,0); i < a.t; ++i)\n    r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\n  r.clamp();\n  r.drShiftTo(1,r);\n}\n\n// Barrett modular reduction\nfunction Barrett(m) {\n  // setup Barrett\n  this.r2 = nbi();\n  this.q3 = nbi();\n  BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\n  this.mu = this.r2.divide(m);\n  this.m = m;\n}\n\nfunction barrettConvert(x) {\n  if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\n  else if(x.compareTo(this.m) < 0) return x;\n  else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n}\n\nfunction barrettRevert(x) { return x; }\n\n// x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\n  x.drShiftTo(this.m.t-1,this.r2);\n  if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\n  this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\n  this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\n  while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\n  x.subTo(this.r2,x);\n  while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n}\n\n// r = x^2 mod m; x != r\nfunction barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n// r = x*y mod m; x,y != r\nfunction barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo;\n\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e,m) {\n\t// we switched to leemons bigint lib for modpow, as this is faster on safari browsers (reduced the decryption times: 9s -> 3,4s)\n\t// TODO introduce switch for other browsers, as they are slower (by factor 0.5) because of the conversion overhead\n\tvar xHex = this.toString(16);\n\tvar eHex = e.toString(16);\n\tvar mHex = m.toString(16);\n\tvar result = powMod(str2bigInt(xHex,16),str2bigInt(eHex,16),str2bigInt(mHex,16));\n\treturn new BigInteger(bigInt2str(result,16),16);\n//  var i = e.bitLength(), k, r = nbv(1), z;\n//  if(i <= 0) return r;\n//  else if(i < 18) k = 1;\n//  else if(i < 48) k = 3;\n//  else if(i < 144) k = 4;\n//  else if(i < 768) k = 5;\n//  else k = 6;\n//  if(i < 8)\n//    z = new Classic(m);\n//  else if(m.isEven())\n//    z = new Barrett(m);\n//  else\n//    z = new Montgomery(m);\n//\n//  // precomputation\n//  var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\n//  g[1] = z.convert(this);\n//  if(k > 1) {\n//    var g2 = nbi();\n//    z.sqrTo(g[1],g2);\n//    while(n <= km) {\n//      g[n] = nbi();\n//      z.mulTo(g2,g[n-2],g[n]);\n//      n += 2;\n//    }\n//  }\n//\n//  var j = e.t-1, w, is1 = true, r2 = nbi(), t;\n//  i = nbits(e[j])-1;\n//  while(j >= 0) {\n//    if(i >= k1) w = (e[j]>>(i-k1))&km;\n//    else {\n//      w = (e[j]&((1<<(i+1))-1))<<(k1-i);\n//      if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\n//    }\n//\n//    n = k;\n//    while((w&1) == 0) { w >>= 1; --n; }\n//    if((i -= n) < 0) { i += this.DB; --j; }\n//    if(is1) {\t// ret == 1, don't bother squaring or multiplying it\n//      g[w].copyTo(r);\n//      is1 = false;\n//    }\n//    else {\n//      while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n//      if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n//      z.mulTo(r2,g[w],r);\n//    }\n//\n//    while(j >= 0 && (e[j]&(1<<i)) == 0) {\n//      z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n//      if(--i < 0) { i = this.DB-1; --j; }\n//    }\n//  }\n//  return z.revert(r);\n}\n\n// (public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\n  var x = (this.s<0)?this.negate():this.clone();\n  var y = (a.s<0)?a.negate():a.clone();\n  if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\n  var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n  if(g < 0) return x;\n  if(i < g) g = i;\n  if(g > 0) {\n    x.rShiftTo(g,x);\n    y.rShiftTo(g,y);\n  }\n  while(x.signum() > 0) {\n    if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n    if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n    if(x.compareTo(y) >= 0) {\n      x.subTo(y,x);\n      x.rShiftTo(1,x);\n    }\n    else {\n      y.subTo(x,y);\n      y.rShiftTo(1,y);\n    }\n  }\n  if(g > 0) y.lShiftTo(g,y);\n  return y;\n}\n\n// (protected) this % n, n < 2^26\nfunction bnpModInt(n) {\n  if(n <= 0) return 0;\n  var d = this.DV%n, r = (this.s<0)?n-1:0;\n  if(this.t > 0)\n    if(d == 0) r = this[0]%n;\n    else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\n  return r;\n}\n\n// (public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\n  var ac = m.isEven();\n  if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n  var u = m.clone(), v = this.clone();\n  var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n  while(u.signum() != 0) {\n    while(u.isEven()) {\n      u.rShiftTo(1,u);\n      if(ac) {\n        if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n        a.rShiftTo(1,a);\n      }\n      else if(!b.isEven()) b.subTo(m,b);\n      b.rShiftTo(1,b);\n    }\n    while(v.isEven()) {\n      v.rShiftTo(1,v);\n      if(ac) {\n        if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n        c.rShiftTo(1,c);\n      }\n      else if(!d.isEven()) d.subTo(m,d);\n      d.rShiftTo(1,d);\n    }\n    if(u.compareTo(v) >= 0) {\n      u.subTo(v,u);\n      if(ac) a.subTo(c,a);\n      b.subTo(d,b);\n    }\n    else {\n      v.subTo(u,v);\n      if(ac) c.subTo(a,c);\n      d.subTo(b,d);\n    }\n  }\n  if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n  if(d.compareTo(m) >= 0) return d.subtract(m);\n  if(d.signum() < 0) d.addTo(m,d); else return d;\n  if(d.signum() < 0) return d.add(m); else return d;\n}\n\nvar lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\nvar lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\n// (public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\n  var i, x = this.abs();\n  if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\n    for(i = 0; i < lowprimes.length; ++i)\n      if(x[0] == lowprimes[i]) return true;\n    return false;\n  }\n  if(x.isEven()) return false;\n  i = 1;\n  while(i < lowprimes.length) {\n    var m = lowprimes[i], j = i+1;\n    while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n    m = x.modInt(m);\n    while(i < j) if(m%lowprimes[i++] == 0) return false;\n  }\n  return x.millerRabin(t);\n}\n\n// (protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\n  var n1 = this.subtract(BigInteger.ONE);\n  var k = n1.getLowestSetBit();\n  if(k <= 0) return false;\n  var r = n1.shiftRight(k);\n  t = (t+1)>>1;\n  if(t > lowprimes.length) t = lowprimes.length;\n  var a = nbi();\n  for(var i = 0; i < t; ++i) {\n    //Pick bases at random, instead of starting at 2\n    // TUTAO: It is fine to use Math.random() instead secure random here because it is only used for checking if the number is a prime. The number itself is generated with the secure random number generator.\n    a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);\n    var y = a.modPow(r,this);\n    if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n      var j = 1;\n      while(j++ < k && y.compareTo(n1) != 0) {\n        y = y.modPowInt(2,this);\n        if(y.compareTo(BigInteger.ONE) == 0) return false;\n      }\n      if(y.compareTo(n1) != 0) return false;\n    }\n  }\n  return true;\n}\n\n// protected\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.fromNumber = bnpFromNumber;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.changeBit = bnpChangeBit;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\nBigInteger.prototype.modInt = bnpModInt;\nBigInteger.prototype.millerRabin = bnpMillerRabin;\n\n// public\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.byteValue = bnByteValue;\nBigInteger.prototype.shortValue = bnShortValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.andNot = bnAndNot;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.shiftLeft = bnShiftLeft;\nBigInteger.prototype.shiftRight = bnShiftRight;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.bitCount = bnBitCount;\nBigInteger.prototype.testBit = bnTestBit;\nBigInteger.prototype.setBit = bnSetBit;\nBigInteger.prototype.clearBit = bnClearBit;\nBigInteger.prototype.flipBit = bnFlipBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.modInverse = bnModInverse;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\n// JSBN-specific extension\nBigInteger.prototype.square = bnSquare;\n\n// BigInteger interfaces not implemented in jsbn:\n\n// BigInteger(int signum, byte[] magnitude)\n// double doubleValue()\n// float floatValue()\n// int hashCode()\n// long longValue()\n// static BigInteger valueOf(long val)\n\n// Depends on jsbn.js and rng.js\n\n// Version 1.1: support utf-8 encoding in pkcs1pad2\n\n// convert a (hex) string to a bignum object\nfunction parseBigInt(str,r) {\n  return new BigInteger(str,r);\n}\n\nfunction linebrk(s,n) {\n  var ret = \"\";\n  var i = 0;\n  while(i + n < s.length) {\n    ret += s.substring(i,i+n) + \"\\n\";\n    i += n;\n  }\n  return ret + s.substring(i,s.length);\n}\n\nfunction byte2Hex(b) {\n  if(b < 0x10)\n    return \"0\" + b.toString(16);\n  else\n    return b.toString(16);\n}\n\n// PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\nfunction pkcs1pad2(s,n) {\n  if(n < s.length + 11) { // TODO: fix for utf-8\n    alert(\"Message too long for RSA\");\n    return null;\n  }\n  var ba = new Array();\n  var i = s.length - 1;\n  while(i >= 0 && n > 0) {\n    var c = s.charCodeAt(i--);\n    if(c < 128) { // encode using utf-8\n      ba[--n] = c;\n    }\n    else if((c > 127) && (c < 2048)) {\n      ba[--n] = (c & 63) | 128;\n      ba[--n] = (c >> 6) | 192;\n    }\n    else {\n      ba[--n] = (c & 63) | 128;\n      ba[--n] = ((c >> 6) & 63) | 128;\n      ba[--n] = (c >> 12) | 224;\n    }\n  }\n  ba[--n] = 0;\n  var rng = new SecureRandom();\n  var x = new Array();\n  while(n > 2) { // random non-zero pad\n    x[0] = 0;\n    while(x[0] == 0) rng.nextBytes(x);\n    ba[--n] = x[0];\n  }\n  ba[--n] = 2;\n  ba[--n] = 0;\n  return new BigInteger(ba);\n}\n\n// \"empty\" RSA key constructor\nfunction RSAKey() {\n  this.n = null;\n  this.e = 0;\n  this.d = null;\n  this.p = null;\n  this.q = null;\n  this.dmp1 = null;\n  this.dmq1 = null;\n  this.coeff = null;\n}\n\n// Set the public key fields N and e from hex strings\nfunction RSASetPublic(N,E) {\n  if(N != null && E != null && N.length > 0 && E.length > 0) {\n    this.n = parseBigInt(N,16);\n    this.e = parseInt(E,16);\n  }\n  else\n    alert(\"Invalid RSA public key\");\n}\n\n// Perform raw public operation on \"x\": return x^e (mod n)\nfunction RSADoPublic(x) {\n  return x.modPowInt(this.e, this.n);\n}\n\n// Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\nfunction RSAEncrypt(text) {\n  var m = pkcs1pad2(text,(this.n.bitLength()+7)>>3);\n  if(m == null) return null;\n  var c = this.doPublic(m);\n  if(c == null) return null;\n  var h = c.toString(16);\n  if((h.length & 1) == 0) return h; else return \"0\" + h;\n}\n\n// Return the PKCS#1 RSA encryption of \"text\" as a Base64-encoded string\n//function RSAEncryptB64(text) {\n//  var h = this.encrypt(text);\n//  if(h) return hex2b64(h); else return null;\n//}\n\n// protected\nRSAKey.prototype.doPublic = RSADoPublic;\n\n// public\nRSAKey.prototype.setPublic = RSASetPublic;\nRSAKey.prototype.encrypt = RSAEncrypt;\n//RSAKey.prototype.encrypt_b64 = RSAEncryptB64;\n\n// Depends on rsa.js and jsbn2.js\n\n// Version 1.1: support utf-8 decoding in pkcs1unpad2\n\n// Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext\nfunction pkcs1unpad2(d,n) {\n  var b = d.toByteArray();\n  var i = 0;\n  while(i < b.length && b[i] == 0) ++i;\n  if(b.length-i != n-1 || b[i] != 2)\n    return null;\n  ++i;\n  while(b[i] != 0)\n    if(++i >= b.length) return null;\n  var ret = \"\";\n  while(++i < b.length) {\n    var c = b[i] & 255;\n    if(c < 128) { // utf-8 decode\n      ret += String.fromCharCode(c);\n    }\n    else if((c > 191) && (c < 224)) {\n      ret += String.fromCharCode(((c & 31) << 6) | (b[i+1] & 63));\n      ++i;\n    }\n    else {\n      ret += String.fromCharCode(((c & 15) << 12) | ((b[i+1] & 63) << 6) | (b[i+2] & 63));\n      i += 2;\n    }\n  }\n  return ret;\n}\n\n// Set the private key fields N, e, and d from hex strings\nfunction RSASetPrivate(N,E,D) {\n  if(N != null && E != null && N.length > 0 && E.length > 0) {\n    this.n = parseBigInt(N,16);\n    this.e = parseInt(E,16);\n    this.d = parseBigInt(D,16);\n  }\n  else\n    alert(\"Invalid RSA private key\");\n}\n\n// Set the private key fields N, e, d and CRT params from hex strings\nfunction RSASetPrivateEx(N,E,D,P,Q,DP,DQ,C) {\n  if(N != null && E != null && N.length > 0 && E.length > 0) {\n    this.n = parseBigInt(N,16);\n    this.e = parseInt(E,16);\n    this.d = parseBigInt(D,16);\n    this.p = parseBigInt(P,16);\n    this.q = parseBigInt(Q,16);\n    this.dmp1 = parseBigInt(DP,16);\n    this.dmq1 = parseBigInt(DQ,16);\n    this.coeff = parseBigInt(C,16);\n  }\n  else\n    alert(\"Invalid RSA private key\");\n}\n\n// Generate a new random private key B bits long, using public expt E\nfunction RSAGenerate(B,E) {\n    var rng = new SecureRandom();\n    var qs = B>>1;\n    this.e = parseInt(E,16);\n    var ee = new BigInteger(E,16);\n    for(;;) {\n        for(;;) {\n            this.p = new BigInteger(B-qs,10,rng); // tutao: changed parameter b from 1 to 10 (=> 5 rounds); according to HAC 4.49, we only need 2 rounds && discussion: https://github.com/digitalbazaar/forge/issues/28\n            // tutao: the prime probability is already guaranteed by the BigInteger constructor above; if(this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) break;\n            if(this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0) break;\n        }\n        for(;;) {\n            // tutao: same changes as above\n            this.q = new BigInteger(qs,10,rng);\n            if(this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0) break;\n        }\n        if(this.p.compareTo(this.q) <= 0) {\n            var t = this.p;\n            this.p = this.q;\n            this.q = t;\n        }\n        var p1 = this.p.subtract(BigInteger.ONE);\n        var q1 = this.q.subtract(BigInteger.ONE);\n        var phi = p1.multiply(q1);\n        if(phi.gcd(ee).compareTo(BigInteger.ONE) == 0) {\n            this.n = this.p.multiply(this.q);\n            this.d = ee.modInverse(phi);\n            this.dmp1 = this.d.mod(p1);\n            this.dmq1 = this.d.mod(q1);\n            this.coeff = this.q.modInverse(this.p);\n            break;\n        }\n    }\n}\n\n// Perform raw private operation on \"x\": return x^d (mod n)\nfunction RSADoPrivate(x) {\n  if(this.p == null || this.q == null)\n    return x.modPow(this.d, this.n);\n\n  // TODO: re-calculate any missing CRT params\n  var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n  var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n\n  while(xp.compareTo(xq) < 0)\n    xp = xp.add(this.p);\n  return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n}\n\n// Return the PKCS#1 RSA decryption of \"ctext\".\n// \"ctext\" is an even-length hex string and the output is a plain string.\nfunction RSADecrypt(ctext) {\n  var c = parseBigInt(ctext, 16);\n  var m = this.doPrivate(c);\n  if(m == null) return null;\n  return pkcs1unpad2(m, (this.n.bitLength()+7)>>3);\n}\n\n// Return the PKCS#1 RSA decryption of \"ctext\".\n// \"ctext\" is a Base64-encoded string and the output is a plain string.\n//function RSAB64Decrypt(ctext) {\n//  var h = b64tohex(ctext);\n//  if(h) return this.decrypt(h); else return null;\n//}\n\n// protected\nRSAKey.prototype.doPrivate = RSADoPrivate;\n\n// public\nRSAKey.prototype.setPrivate = RSASetPrivate;\nRSAKey.prototype.setPrivateEx = RSASetPrivateEx;\nRSAKey.prototype.generate = RSAGenerate;\nRSAKey.prototype.decrypt = RSADecrypt;\n//RSAKey.prototype.b64_decrypt = RSAB64Decrypt;\n\n////////////////////////////////////////////////////////////////////////////////////////\n// Big Integer Library v. 5.4\n// Created 2000, last modified 2009\n// Leemon Baird\n// www.leemon.com\n//\n// Version history:\n// v 5.4  3 Oct 2009\n//   - added \"var i\" to greaterShift() so i is not global. (Thanks to PŽter Szab— for finding that bug)\n//\n// v 5.3  21 Sep 2009\n//   - added randProbPrime(k) for probable primes\n//   - unrolled loop in mont_ (slightly faster)\n//   - millerRabin now takes a bigInt parameter rather than an int\n//\n// v 5.2  15 Sep 2009\n//   - fixed capitalization in call to int2bigInt in randBigInt\n//     (thanks to Emili Evripidou, Reinhold Behringer, and Samuel Macaleese for finding that bug)\n//\n// v 5.1  8 Oct 2007 \n//   - renamed inverseModInt_ to inverseModInt since it doesn't change its parameters\n//   - added functions GCD and randBigInt, which call GCD_ and randBigInt_\n//   - fixed a bug found by Rob Visser (see comment with his name below)\n//   - improved comments\n//\n// This file is public domain.   You can use it for any purpose without restriction.\n// I do not guarantee that it is correct, so use it at your own risk.  If you use \n// it for something interesting, I'd appreciate hearing about it.  If you find \n// any bugs or make any improvements, I'd appreciate hearing about those too.\n// It would also be nice if my name and URL were left in the comments.  But none \n// of that is required.\n//\n// This code defines a bigInt library for arbitrary-precision integers.\n// A bigInt is an array of integers storing the value in chunks of bpe bits, \n// little endian (buff[0] is the least significant word).\n// Negative bigInts are stored two's complement.  Almost all the functions treat\n// bigInts as nonnegative.  The few that view them as two's complement say so\n// in their comments.  Some functions assume their parameters have at least one \n// leading zero element. Functions with an underscore at the end of the name put\n// their answer into one of the arrays passed in, and have unpredictable behavior \n// in case of overflow, so the caller must make sure the arrays are big enough to \n// hold the answer.  But the average user should never have to call any of the \n// underscored functions.  Each important underscored function has a wrapper function \n// of the same name without the underscore that takes care of the details for you.  \n// For each underscored function where a parameter is modified, that same variable \n// must not be used as another argument too.  So, you cannot square x by doing \n// multMod_(x,x,n).  You must use squareMod_(x,n) instead, or do y=dup(x); multMod_(x,y,n).\n// Or simply use the multMod(x,x,n) function without the underscore, where\n// such issues never arise, because non-underscored functions never change\n// their parameters; they always allocate new memory for the answer that is returned.\n//\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\n// For most functions, if it needs a BigInt as a local variable it will actually use\n// a global, and will only allocate to it only when it's not the right size.  This ensures\n// that when a function is called repeatedly with same-sized parameters, it only allocates\n// memory on the first call.\n//\n// Note that for cryptographic purposes, the calls to Math.random() must \n// be replaced with calls to a better pseudorandom number generator.\n//\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer \n// can be negative.  Negative bigInts are 2s complement.\n// \n// The following functions do not modify their inputs.\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\n// Those returning boolean or int will not allocate memory except possibly on the first \n// time they're called with a given parameter size.\n// \n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.  \n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\n// bigInt  dup(x)                 //return a copy of bigInt x\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\n// Array   findPrimes(n)          //return array of all primes less than integer n\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\n// boolean isZero(x)              //is the bigInt x equal to zero?\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\n// boolean negative(x)            //is bigInt x negative?\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\n//\n//\n// The following functions each have a non-underscored version, which most users should call instead.\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array \n// passed in is large enough to hold the result. \n//\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\n// void    add_(x,y)             //do x=x+y for bigInts x and y\n// void    copy_(x,y)            //do x=y on bigInts x and y\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\n//\n// The following functions do NOT have a non-underscored version. \n// They each write a bigInt result to one or more parameters.  The caller is responsible for\n// ensuring the arrays passed in are large enough to hold the results. \n//\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\n// int  eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\n//\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\n//    mont_()             = algorithm 14.36, Montgomery multiplication\n//    divide_()           = algorithm 14.20  Multiple-precision division\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\n//\n// Profiling shows:\n//     randTruePrime_() spends:\n//         10% of its time in calls to powMod_()\n//         85% of its time in calls to millerRabin()\n//     millerRabin() spends:\n//         99% of its time in calls to powMod_()   (always with a base of 2)\n//     powMod_() spends:\n//         94% of its time in calls to mont_()  (almost always with x==y)\n//\n// This suggests there are several ways to speed up this library slightly:\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\n//         -- this should especially focus on being fast when raising 2 to a power mod n\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\n//       within the loop when all the parameters are the same length.\n//\n// There are several ideas that look like they wouldn't help much at all:\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\n//       Montgomery reduction, but that's obviously wrong.\n////////////////////////////////////////////////////////////////////////////////////////\n\n//globals\nbpe=0;         //bits stored per array element\nmask=0;        //AND this with an array element to chop it down to bpe bits\nradix=mask+1;  //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.\n\n//the digits for converting to different bases\ndigitsStr='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\\\\'\\\"+-';\n\n//initialize the global variables\nfor (bpe=0; (1<<(bpe+1)) > (1<<bpe); bpe++);  //bpe=number of bits in the mantissa on this platform\nbpe>>=1;                   //bpe=number of bits in one element of the array representing the bigInt\nmask=(1<<bpe)-1;           //AND the mask with an integer to get its bpe least significant bits\nradix=mask+1;              //2^bpe.  a single 1 bit to the left of the first bit of mask\none=int2bigInt(1,1,1);     //constant used in powMod_()\n\n//the following global variables are scratchpad memory to \n//reduce dynamic memory allocation in the inner loop\nt=new Array(0);\nss=t;       //used in mult_()\ns0=t;       //used in multMod_(), squareMod_() \ns1=t;       //used in powMod_(), multMod_(), squareMod_() \ns2=t;       //used in powMod_(), multMod_()\ns3=t;       //used in powMod_()\ns4=t; s5=t; //used in mod_()\ns6=t;       //used in bigInt2str()\ns7=t;       //used in powMod_()\nT=t;        //used in GCD_()\nsa=t;       //used in mont_()\nmr_x1=t; mr_r=t; mr_a=t;                                      //used in millerRabin()\neg_v=t; eg_u=t; eg_A=t; eg_B=t; eg_C=t; eg_D=t;               //used in eGCD_(), inverseMod_()\nmd_q1=t; md_q2=t; md_q3=t; md_r=t; md_r1=t; md_r2=t; md_tt=t; //used in mod_()\n\nprimes=t; pows=t; s_i=t; s_i2=t; s_R=t; s_rm=t; s_q=t; s_n1=t; \n  s_a=t; s_r2=t; s_n=t; s_b=t; s_d=t; s_x1=t; s_x2=t, s_aa=t; //used in randTruePrime_()\n  \nrpprb=t; //used in randProbPrimeRounds() (which also uses \"primes\")\n\n////////////////////////////////////////////////////////////////////////////////////////\n\n\n//return array of all primes less than integer n\nfunction findPrimes(n) {\n  var i,s,p,ans;\n  s=new Array(n);\n  for (i=0;i<n;i++)\n    s[i]=0;\n  s[0]=2;\n  p=0;    //first p elements of s are primes, the rest are a sieve\n  for(;s[p]<n;) {                  //s[p] is the pth prime\n    for(i=s[p]*s[p]; i<n; i+=s[p]) //mark multiples of s[p]\n      s[i]=1;\n    p++;\n    s[p]=s[p-1]+1;\n    for(; s[p]<n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)\n  }\n  ans=new Array(p);\n  for(i=0;i<p;i++)\n    ans[i]=s[i];\n  return ans;\n}\n\n\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\n//x is a bigInt, and b is an integer, with b<x\nfunction millerRabinInt(x,b) {\n  if (mr_x1.length!=x.length) {\n    mr_x1=dup(x);\n    mr_r=dup(x);\n    mr_a=dup(x);\n  }\n\n  copyInt_(mr_a,b);\n  return millerRabin(x,mr_a);\n}\n\n//does a single round of Miller-Rabin base b consider x to be a possible prime?\n//x and b are bigInts with b<x\nfunction millerRabin(x,b) {\n  var i,j,k,s;\n\n  if (mr_x1.length!=x.length) {\n    mr_x1=dup(x);\n    mr_r=dup(x);\n    mr_a=dup(x);\n  }\n\n  copy_(mr_a,b);\n  copy_(mr_r,x);\n  copy_(mr_x1,x);\n\n  addInt_(mr_r,-1);\n  addInt_(mr_x1,-1);\n\n  //s=the highest power of two that divides mr_r\n  k=0;\n  for (i=0;i<mr_r.length;i++)\n    for (j=1;j<mask;j<<=1)\n      if (x[i] & j) {\n        s=(k<mr_r.length+bpe ? k : 0); \n         i=mr_r.length;\n         j=mask;\n      } else\n        k++;\n\n  if (s)                \n    rightShift_(mr_r,s);\n\n  powMod_(mr_a,mr_r,x);\n\n  if (!equalsInt(mr_a,1) && !equals(mr_a,mr_x1)) {\n    j=1;\n    while (j<=s-1 && !equals(mr_a,mr_x1)) {\n      squareMod_(mr_a,x);\n      if (equalsInt(mr_a,1)) {\n        return 0;\n      }\n      j++;\n    }\n    if (!equals(mr_a,mr_x1)) {\n      return 0;\n    }\n  }\n  return 1;  \n}\n\n//returns how many bits long the bigInt is, not counting leading zeros.\nfunction bitSize(x) {\n  var j,z,w;\n  for (j=x.length-1; (x[j]==0) && (j>0); j--);\n  for (z=0,w=x[j]; w; (w>>=1),z++);\n  z+=bpe*j;\n  return z;\n}\n\n//return a copy of x with at least n elements, adding leading zeros if needed\nfunction expand(x,n) {\n  var ans=int2bigInt(0,(x.length>n ? x.length : n)*bpe,0);\n  copy_(ans,x);\n  return ans;\n}\n\n//return a k-bit true random prime using Maurer's algorithm.\nfunction randTruePrime(k) {\n  var ans=int2bigInt(0,k,0);\n  randTruePrime_(ans,k);\n  return trim(ans,1);\n}\n\n//return a k-bit random probable prime with probability of error < 2^-80\nfunction randProbPrime(k) {\n  if (k>=600) return randProbPrimeRounds(k,2); //numbers from HAC table 4.3\n  if (k>=550) return randProbPrimeRounds(k,4);\n  if (k>=500) return randProbPrimeRounds(k,5);\n  if (k>=400) return randProbPrimeRounds(k,6);\n  if (k>=350) return randProbPrimeRounds(k,7);\n  if (k>=300) return randProbPrimeRounds(k,9);\n  if (k>=250) return randProbPrimeRounds(k,12); //numbers from HAC table 4.4\n  if (k>=200) return randProbPrimeRounds(k,15);\n  if (k>=150) return randProbPrimeRounds(k,18);\n  if (k>=100) return randProbPrimeRounds(k,27);\n              return randProbPrimeRounds(k,40); //number from HAC remark 4.26 (only an estimate)\n}\n\n//return a k-bit probable random prime using n rounds of Miller Rabin (after trial division with small primes)\t\nfunction randProbPrimeRounds(k,n) {\n  var ans, i, divisible, B; \n  B=30000;  //B is largest prime to use in trial division\n  ans=int2bigInt(0,k,0);\n  \n  //optimization: try larger and smaller B to find the best limit.\n  \n  if (primes.length==0)\n    primes=findPrimes(30000);  //check for divisibility by primes <=30000\n\n  if (rpprb.length!=ans.length)\n    rpprb=dup(ans);\n\n  for (;;) { //keep trying random values for ans until one appears to be prime\n    //optimization: pick a random number times L=2*3*5*...*p, plus a \n    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.\n    //   This can reduce the amount of random number generation.\n    \n    randBigInt_(ans,k,0); //ans = a random odd number to check\n    ans[0] |= 1; \n    divisible=0;\n  \n    //check ans for divisibility by small primes up to B\n    for (i=0; (i<primes.length) && (primes[i]<=B); i++)\n      if (modInt(ans,primes[i])==0 && !equalsInt(ans,primes[i])) {\n        divisible=1;\n        break;\n      }      \n    \n    //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.\n    \n    //do n rounds of Miller Rabin, with random bases less than ans\n    for (i=0; i<n && !divisible; i++) {\n      randBigInt_(rpprb,k,0);\n      while(!greater(ans,rpprb)) //pick a random rpprb that's < ans\n        randBigInt_(rpprb,k,0);\n      if (!millerRabin(ans,rpprb))\n        divisible=1;\n    }\n    \n    if(!divisible)\n      return ans;\n  }  \n}\n\n//return a new bigInt equal to (x mod n) for bigInts x and n.\nfunction mod(x,n) {\n  var ans=dup(x);\n  mod_(ans,n);\n  return trim(ans,1);\n}\n\n//return (x+n) where x is a bigInt and n is an integer.\nfunction addInt(x,n) {\n  var ans=expand(x,x.length+1);\n  addInt_(ans,n);\n  return trim(ans,1);\n}\n\n//return x*y for bigInts x and y. This is faster when y<x.\nfunction mult(x,y) {\n  var ans=expand(x,x.length+y.length);\n  mult_(ans,y);\n  return trim(ans,1);\n}\n\n//return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\nfunction powMod(x,y,n) {\n  var ans=expand(x,n.length);  \n  powMod_(ans,trim(y,2),trim(n,2),0);  //this should work without the trim, but doesn't\n  return trim(ans,1);\n}\n\n//return (x-y) for bigInts x and y.  Negative answers will be 2s complement\nfunction sub(x,y) {\n  var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1)); \n  sub_(ans,y);\n  return trim(ans,1);\n}\n\n//return (x+y) for bigInts x and y.  \nfunction add(x,y) {\n  var ans=expand(x,(x.length>y.length ? x.length+1 : y.length+1)); \n  add_(ans,y);\n  return trim(ans,1);\n}\n\n//return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\nfunction inverseMod(x,n) {\n  var ans=expand(x,n.length); \n  var s;\n  s=inverseMod_(ans,n);\n  return s ? trim(ans,1) : null;\n}\n\n//return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\nfunction multMod(x,y,n) {\n  var ans=expand(x,n.length);\n  multMod_(ans,y,n);\n  return trim(ans,1);\n}\n\n/* TUTAO: not used\n//generate a k-bit true random prime using Maurer's algorithm,\n//and put it into ans.  The bigInt ans must be large enough to hold it.\nfunction randTruePrime_(ans,k) {\n  var c,m,pm,dd,j,r,B,divisible,z,zz,recSize;\n\n  if (primes.length==0)\n    primes=findPrimes(30000);  //check for divisibility by primes <=30000\n\n  if (pows.length==0) {\n    pows=new Array(512);\n    for (j=0;j<512;j++) {\n      pows[j]=Math.pow(2,j/511.-1.);\n    }\n  }\n\n  //c and m should be tuned for a particular machine and value of k, to maximize speed\n  c=0.1;  //c=0.1 in HAC\n  m=20;   //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n  recLimit=20; //stop recursion when k <=recLimit.  Must have recLimit >= 2\n\n  if (s_i2.length!=ans.length) {\n    s_i2=dup(ans);\n    s_R =dup(ans);\n    s_n1=dup(ans);\n    s_r2=dup(ans);\n    s_d =dup(ans);\n    s_x1=dup(ans);\n    s_x2=dup(ans);\n    s_b =dup(ans);\n    s_n =dup(ans);\n    s_i =dup(ans);\n    s_rm=dup(ans);\n    s_q =dup(ans);\n    s_a =dup(ans);\n    s_aa=dup(ans);\n  }\n\n  if (k <= recLimit) {  //generate small random primes by trial division up to its square root\n    pm=(1<<((k+2)>>1))-1; //pm is binary number with all ones, just over sqrt(2^k)\n    copyInt_(ans,0);\n    for (dd=1;dd;) {\n      dd=0;\n      ans[0]= 1 | (1<<(k-1)) | Math.floor(Math.random()*(1<<k));  //random, k-bit, odd integer, with msb 1\n      for (j=1;(j<primes.length) && ((primes[j]&pm)==primes[j]);j++) { //trial division by all primes 3...sqrt(2^k)\n        if (0==(ans[0]%primes[j])) {\n          dd=1;\n          break;\n        }\n      }\n    }\n    carry_(ans);\n    return;\n  }\n\n  B=c*k*k;    //try small primes up to B (or all the primes[] array if the largest is less than B).\n  if (k>2*m)  //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n    for (r=1; k-k*r<=m; )\n      r=pows[Math.floor(Math.random()*512)];   //r=Math.pow(2,Math.random()-1);\n  else\n    r=.5;\n\n  //simulation suggests the more complex algorithm using r=.333 is only slightly faster.\n\n  recSize=Math.floor(r*k)+1;\n\n  randTruePrime_(s_q,recSize);\n  copyInt_(s_i2,0);\n  s_i2[Math.floor((k-2)/bpe)] |= (1<<((k-2)%bpe));   //s_i2=2^(k-2)\n  divide_(s_i2,s_q,s_i,s_rm);                        //s_i=floor((2^(k-1))/(2q))\n\n  z=bitSize(s_i);\n\n  for (;;) {\n    for (;;) {  //generate z-bit numbers until one falls in the range [0,s_i-1]\n      randBigInt_(s_R,z,0);\n      if (greater(s_i,s_R))\n        break;\n    }                //now s_R is in the range [0,s_i-1]\n    addInt_(s_R,1);  //now s_R is in the range [1,s_i]\n    add_(s_R,s_i);   //now s_R is in the range [s_i+1,2*s_i]\n\n    copy_(s_n,s_q);\n    mult_(s_n,s_R); \n    multInt_(s_n,2);\n    addInt_(s_n,1);    //s_n=2*s_R*s_q+1\n    \n    copy_(s_r2,s_R);\n    multInt_(s_r2,2);  //s_r2=2*s_R\n\n    //check s_n for divisibility by small primes up to B\n    for (divisible=0,j=0; (j<primes.length) && (primes[j]<B); j++)\n      if (modInt(s_n,primes[j])==0 && !equalsInt(s_n,primes[j])) {\n        divisible=1;\n        break;\n      }      \n\n    if (!divisible)    //if it passes small primes check, then try a single Miller-Rabin base 2\n      if (!millerRabinInt(s_n,2)) //this line represents 75% of the total runtime for randTruePrime_ \n        divisible=1;\n\n    if (!divisible) {  //if it passes that test, continue checking s_n\n      addInt_(s_n,-3);\n      for (j=s_n.length-1;(s_n[j]==0) && (j>0); j--);  //strip leading zeros\n      for (zz=0,w=s_n[j]; w; (w>>=1),zz++);\n      zz+=bpe*j;                             //zz=number of bits in s_n, ignoring leading zeros\n      for (;;) {  //generate z-bit numbers until one falls in the range [0,s_n-1]\n        randBigInt_(s_a,zz,0);\n        if (greater(s_n,s_a))\n          break;\n      }                //now s_a is in the range [0,s_n-1]\n      addInt_(s_n,3);  //now s_a is in the range [0,s_n-4]\n      addInt_(s_a,2);  //now s_a is in the range [2,s_n-2]\n      copy_(s_b,s_a);\n      copy_(s_n1,s_n);\n      addInt_(s_n1,-1);\n      powMod_(s_b,s_n1,s_n);   //s_b=s_a^(s_n-1) modulo s_n\n      addInt_(s_b,-1);\n      if (isZero(s_b)) {\n        copy_(s_b,s_a);\n        powMod_(s_b,s_r2,s_n);\n        addInt_(s_b,-1);\n        copy_(s_aa,s_n);\n        copy_(s_d,s_b);\n        GCD_(s_d,s_n);  //if s_b and s_n are relatively prime, then s_n is a prime\n        if (equalsInt(s_d,1)) {\n          copy_(ans,s_aa);\n          return;     //if we've made it this far, then s_n is absolutely guaranteed to be prime\n        }\n      }\n    }\n  }\n}\n*/\n\n//Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\nfunction randBigInt(n,s) {\n  var a,b;\n  a=Math.floor((n-1)/bpe)+2; //# array elements to hold the BigInt with a leading 0 element\n  b=int2bigInt(0,0,a);\n  randBigInt_(b,n,s);\n  return b;\n}\n\n/* TUTAO: not used\n//Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.\n//Array b must be big enough to hold the result. Must have n>=1\nfunction randBigInt_(b,n,s) {\n  var i,a;\n  for (i=0;i<b.length;i++)\n    b[i]=0;\n  a=Math.floor((n-1)/bpe)+1; //# array elements to hold the BigInt\n  for (i=0;i<a;i++) {\n    b[i]=Math.floor(Math.random()*(1<<(bpe-1)));\n  }\n  b[a-1] &= (2<<((n-1)%bpe))-1;\n  if (s==1)\n    b[a-1] |= (1<<((n-1)%bpe));\n}\n*/\n\n//Return the greatest common divisor of bigInts x and y (each with same number of elements).\nfunction GCD(x,y) {\n  var xc,yc;\n  xc=dup(x);\n  yc=dup(y);\n  GCD_(xc,yc);\n  return xc;\n}\n\n//set x to the greatest common divisor of bigInts x and y (each with same number of elements).\n//y is destroyed.\nfunction GCD_(x,y) {\n  var i,xp,yp,A,B,C,D,q,sing;\n  if (T.length!=x.length)\n    T=dup(x);\n\n  sing=1;\n  while (sing) { //while y has nonzero elements other than y[0]\n    sing=0;\n    for (i=1;i<y.length;i++) //check if y has nonzero elements other than 0\n      if (y[i]) {\n        sing=1;\n        break;\n      }\n    if (!sing) break; //quit when y all zero elements except possibly y[0]\n\n    for (i=x.length;!x[i] && i>=0;i--);  //find most significant element of x\n    xp=x[i];\n    yp=y[i];\n    A=1; B=0; C=0; D=1;\n    while ((yp+C) && (yp+D)) {\n      q =Math.floor((xp+A)/(yp+C));\n      qp=Math.floor((xp+B)/(yp+D));\n      if (q!=qp)\n        break;\n      t= A-q*C;   A=C;   C=t;    //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)      \n      t= B-q*D;   B=D;   D=t;\n      t=xp-q*yp; xp=yp; yp=t;\n    }\n    if (B) {\n      copy_(T,x);\n      linComb_(x,y,A,B); //x=A*x+B*y\n      linComb_(y,T,D,C); //y=D*y+C*T\n    } else {\n      mod_(x,y);\n      copy_(T,x);\n      copy_(x,y);\n      copy_(y,T);\n    } \n  }\n  if (y[0]==0)\n    return;\n  t=modInt(x,y[0]);\n  copyInt_(x,y[0]);\n  y[0]=t;\n  while (y[0]) {\n    x[0]%=y[0];\n    t=x[0]; x[0]=y[0]; y[0]=t;\n  }\n}\n\n//do x=x**(-1) mod n, for bigInts x and n.\n//If no inverse exists, it sets x to zero and returns 0, else it returns 1.\n//The x array must be at least as large as the n array.\nfunction inverseMod_(x,n) {\n  var k=1+2*Math.max(x.length,n.length);\n\n  if(!(x[0]&1)  && !(n[0]&1)) {  //if both inputs are even, then inverse doesn't exist\n    copyInt_(x,0);\n    return 0;\n  }\n\n  if (eg_u.length!=k) {\n    eg_u=new Array(k);\n    eg_v=new Array(k);\n    eg_A=new Array(k);\n    eg_B=new Array(k);\n    eg_C=new Array(k);\n    eg_D=new Array(k);\n  }\n\n  copy_(eg_u,x);\n  copy_(eg_v,n);\n  copyInt_(eg_A,1);\n  copyInt_(eg_B,0);\n  copyInt_(eg_C,0);\n  copyInt_(eg_D,1);\n  for (;;) {\n    while(!(eg_u[0]&1)) {  //while eg_u is even\n      halve_(eg_u);\n      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if eg_A==eg_B==0 mod 2\n        halve_(eg_A);\n        halve_(eg_B);      \n      } else {\n        add_(eg_A,n);  halve_(eg_A);\n        sub_(eg_B,x);  halve_(eg_B);\n      }\n    }\n\n    while (!(eg_v[0]&1)) {  //while eg_v is even\n      halve_(eg_v);\n      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if eg_C==eg_D==0 mod 2\n        halve_(eg_C);\n        halve_(eg_D);      \n      } else {\n        add_(eg_C,n);  halve_(eg_C);\n        sub_(eg_D,x);  halve_(eg_D);\n      }\n    }\n\n    if (!greater(eg_v,eg_u)) { //eg_v <= eg_u\n      sub_(eg_u,eg_v);\n      sub_(eg_A,eg_C);\n      sub_(eg_B,eg_D);\n    } else {                   //eg_v > eg_u\n      sub_(eg_v,eg_u);\n      sub_(eg_C,eg_A);\n      sub_(eg_D,eg_B);\n    }\n  \n    if (equalsInt(eg_u,0)) {\n      if (negative(eg_C)) //make sure answer is nonnegative\n        add_(eg_C,n);\n      copy_(x,eg_C);\n\n      if (!equalsInt(eg_v,1)) { //if GCD_(x,n)!=1, then there is no inverse\n        copyInt_(x,0);\n        return 0;\n      }\n      return 1;\n    }\n  }\n}\n\n//return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\nfunction inverseModInt(x,n) {\n  var a=1,b=0,t;\n  for (;;) {\n    if (x==1) return a;\n    if (x==0) return 0;\n    b-=a*Math.floor(n/x);\n    n%=x;\n\n    if (n==1) return b; //to avoid negatives, change this b to n-b, and each -= to +=\n    if (n==0) return 0;\n    a-=b*Math.floor(x/n);\n    x%=n;\n  }\n}\n\n//this deprecated function is for backward compatibility only. \nfunction inverseModInt_(x,n) {\n   return inverseModInt(x,n);\n}\n\n\n//Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:\n//     v = GCD_(x,y) = a*x-b*y\n//The bigInts v, a, b, must have exactly as many elements as the larger of x and y.\nfunction eGCD_(x,y,v,a,b) {\n  var g=0;\n  var k=Math.max(x.length,y.length);\n  if (eg_u.length!=k) {\n    eg_u=new Array(k);\n    eg_A=new Array(k);\n    eg_B=new Array(k);\n    eg_C=new Array(k);\n    eg_D=new Array(k);\n  }\n  while(!(x[0]&1)  && !(y[0]&1)) {  //while x and y both even\n    halve_(x);\n    halve_(y);\n    g++;\n  }\n  copy_(eg_u,x);\n  copy_(v,y);\n  copyInt_(eg_A,1);\n  copyInt_(eg_B,0);\n  copyInt_(eg_C,0);\n  copyInt_(eg_D,1);\n  for (;;) {\n    while(!(eg_u[0]&1)) {  //while u is even\n      halve_(eg_u);\n      if (!(eg_A[0]&1) && !(eg_B[0]&1)) { //if A==B==0 mod 2\n        halve_(eg_A);\n        halve_(eg_B);      \n      } else {\n        add_(eg_A,y);  halve_(eg_A);\n        sub_(eg_B,x);  halve_(eg_B);\n      }\n    }\n\n    while (!(v[0]&1)) {  //while v is even\n      halve_(v);\n      if (!(eg_C[0]&1) && !(eg_D[0]&1)) { //if C==D==0 mod 2\n        halve_(eg_C);\n        halve_(eg_D);      \n      } else {\n        add_(eg_C,y);  halve_(eg_C);\n        sub_(eg_D,x);  halve_(eg_D);\n      }\n    }\n\n    if (!greater(v,eg_u)) { //v<=u\n      sub_(eg_u,v);\n      sub_(eg_A,eg_C);\n      sub_(eg_B,eg_D);\n    } else {                //v>u\n      sub_(v,eg_u);\n      sub_(eg_C,eg_A);\n      sub_(eg_D,eg_B);\n    }\n    if (equalsInt(eg_u,0)) {\n      if (negative(eg_C)) {   //make sure a (C)is nonnegative\n        add_(eg_C,y);\n        sub_(eg_D,x);\n      }\n      multInt_(eg_D,-1);  ///make sure b (D) is nonnegative\n      copy_(a,eg_C);\n      copy_(b,eg_D);\n      leftShift_(v,g);\n      return;\n    }\n  }\n}\n\n\n//is bigInt x negative?\nfunction negative(x) {\n  return ((x[x.length-1]>>(bpe-1))&1);\n}\n\n\n//is (x << (shift*bpe)) > y?\n//x and y are nonnegative bigInts\n//shift is a nonnegative integer\nfunction greaterShift(x,y,shift) {\n  var i, kx=x.length, ky=y.length;\n  k=((kx+shift)<ky) ? (kx+shift) : ky;\n  for (i=ky-1-shift; i<kx && i>=0; i++) \n    if (x[i]>0)\n      return 1; //if there are nonzeros in x to the left of the first column of y, then x is bigger\n  for (i=kx-1+shift; i<ky; i++)\n    if (y[i]>0)\n      return 0; //if there are nonzeros in y to the left of the first column of x, then x is not bigger\n  for (i=k-1; i>=shift; i--)\n    if      (x[i-shift]>y[i]) return 1;\n    else if (x[i-shift]<y[i]) return 0;\n  return 0;\n}\n\n//is x > y? (x and y both nonnegative)\nfunction greater(x,y) {\n  var i;\n  var k=(x.length<y.length) ? x.length : y.length;\n\n  for (i=x.length;i<y.length;i++)\n    if (y[i])\n      return 0;  //y has more digits\n\n  for (i=y.length;i<x.length;i++)\n    if (x[i])\n      return 1;  //x has more digits\n\n  for (i=k-1;i>=0;i--)\n    if (x[i]>y[i])\n      return 1;\n    else if (x[i]<y[i])\n      return 0;\n  return 0;\n}\n\n//divide x by y giving quotient q and remainder r.  (q=floor(x/y),  r=x mod y).  All 4 are bigints.\n//x must have at least one leading zero element.\n//y must be nonzero.\n//q and r must be arrays that are exactly the same length as x. (Or q can have more).\n//Must have x.length >= y.length >= 2.\nfunction divide_(x,y,q,r) {\n  var kx, ky;\n  var i,j,y1,y2,c,a,b;\n  copy_(r,x);\n  for (ky=y.length;y[ky-1]==0;ky--); //ky is number of elements in y, not including leading zeros\n\n  //normalize: ensure the most significant element of y has its highest bit set  \n  b=y[ky-1];\n  for (a=0; b; a++)\n    b>>=1;  \n  a=bpe-a;  //a is how many bits to shift so that the high order bit of y is leftmost in its array element\n  leftShift_(y,a);  //multiply both by 1<<a now, then divide both by that at the end\n  leftShift_(r,a);\n\n  //Rob Visser discovered a bug: the following line was originally just before the normalization.\n  for (kx=r.length;r[kx-1]==0 && kx>ky;kx--); //kx is number of elements in normalized x, not including leading zeros\n\n  copyInt_(q,0);                      // q=0\n  while (!greaterShift(y,r,kx-ky)) {  // while (leftShift_(y,kx-ky) <= r) {\n    subShift_(r,y,kx-ky);             //   r=r-leftShift_(y,kx-ky)\n    q[kx-ky]++;                       //   q[kx-ky]++;\n  }                                   // }\n\n  for (i=kx-1; i>=ky; i--) {\n    if (r[i]==y[ky-1])\n      q[i-ky]=mask;\n    else\n      q[i-ky]=Math.floor((r[i]*radix+r[i-1])/y[ky-1]);\t\n\n    //The following for(;;) loop is equivalent to the commented while loop, \n    //except that the uncommented version avoids overflow.\n    //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0\n    //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])\n    //    q[i-ky]--;    \n    for (;;) {\n      y2=(ky>1 ? y[ky-2] : 0)*q[i-ky];\n      c=y2>>bpe;\n      y2=y2 & mask;\n      y1=c+q[i-ky]*y[ky-1];\n      c=y1>>bpe;\n      y1=y1 & mask;\n\n      if (c==r[i] ? y1==r[i-1] ? y2>(i>1 ? r[i-2] : 0) : y1>r[i-1] : c>r[i]) \n        q[i-ky]--;\n      else\n        break;\n    }\n\n    linCombShift_(r,y,-q[i-ky],i-ky);    //r=r-q[i-ky]*leftShift_(y,i-ky)\n    if (negative(r)) {\n      addShift_(r,y,i-ky);         //r=r+leftShift_(y,i-ky)\n      q[i-ky]--;\n    }\n  }\n\n  rightShift_(y,a);  //undo the normalization step\n  rightShift_(r,a);  //undo the normalization step\n}\n\n//do carries and borrows so each element of the bigInt x fits in bpe bits.\nfunction carry_(x) {\n  var i,k,c,b;\n  k=x.length;\n  c=0;\n  for (i=0;i<k;i++) {\n    c+=x[i];\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n  }\n}\n\n//return x mod n for bigInt x and integer n.\nfunction modInt(x,n) {\n  var i,c=0;\n  for (i=x.length-1; i>=0; i--)\n    c=(c*radix+x[i])%n;\n  return c;\n}\n\n//convert the integer t into a bigInt with at least the given number of bits.\n//the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)\n//Pad the array with leading zeros so that it has at least minSize elements.\n//There will always be at least one leading 0 element.\nfunction int2bigInt(t,bits,minSize) {   \n  var i,k;\n  k=Math.ceil(bits/bpe)+1;\n  k=minSize>k ? minSize : k;\n  buff=new Array(k);\n  copyInt_(buff,t);\n  return buff;\n}\n\n//return the bigInt given a string representation in a given base.  \n//Pad the array with leading zeros so that it has at least minSize elements.\n//If base=-1, then it reads in a space-separated list of array elements in decimal.\n//The array will always have at least one leading zero, unless base=-1.\nfunction str2bigInt(s,base,minSize) {\n  var d, i, j, x, y, kk;\n  var k=s.length;\n  if (base==-1) { //comma-separated list of array elements in decimal\n    x=new Array(0);\n    for (;;) {\n      y=new Array(x.length+1);\n      for (i=0;i<x.length;i++)\n        y[i+1]=x[i];\n      y[0]=parseInt(s,10);\n      x=y;\n      d=s.indexOf(',',0);\n      if (d<1) \n        break;\n      s=s.substring(d+1);\n      if (s.length==0)\n        break;\n    }\n    if (x.length<minSize) {\n      y=new Array(minSize);\n      copy_(y,x);\n      return y;\n    }\n    return x;\n  }\n\n  x=int2bigInt(0,base*k,0);\n  for (i=0;i<k;i++) {\n    d=digitsStr.indexOf(s.substring(i,i+1),0);\n    if (base<=36 && d>=36)  //convert lowercase to uppercase if base<=36\n      d-=26;\n    if (d>=base || d<0) {   //stop at first illegal character\n      break;\n    }\n    multInt_(x,base);\n    addInt_(x,d);\n  }\n\n  for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros\n  k=minSize>k+1 ? minSize : k+1;\n  y=new Array(k);\n  kk=k<x.length ? k : x.length;\n  for (i=0;i<kk;i++)\n    y[i]=x[i];\n  for (;i<k;i++)\n    y[i]=0;\n  return y;\n}\n\n//is bigint x equal to integer y?\n//y must have less than bpe bits\nfunction equalsInt(x,y) {\n  var i;\n  if (x[0]!=y)\n    return 0;\n  for (i=1;i<x.length;i++)\n    if (x[i])\n      return 0;\n  return 1;\n}\n\n//are bigints x and y equal?\n//this works even if x and y are different lengths and have arbitrarily many leading zeros\nfunction equals(x,y) {\n  var i;\n  var k=x.length<y.length ? x.length : y.length;\n  for (i=0;i<k;i++)\n    if (x[i]!=y[i])\n      return 0;\n  if (x.length>y.length) {\n    for (;i<x.length;i++)\n      if (x[i])\n        return 0;\n  } else {\n    for (;i<y.length;i++)\n      if (y[i])\n        return 0;\n  }\n  return 1;\n}\n\n//is the bigInt x equal to zero?\nfunction isZero(x) {\n  var i;\n  for (i=0;i<x.length;i++)\n    if (x[i])\n      return 0;\n  return 1;\n}\n\n//convert a bigInt into a string in a given base, from base 2 up to base 95.\n//Base -1 prints the contents of the array representing the number.\nfunction bigInt2str(x,base) {\n  var i,t,s=\"\";\n\n  if (s6.length!=x.length) \n    s6=dup(x);\n  else\n    copy_(s6,x);\n\n  if (base==-1) { //return the list of array contents\n    for (i=x.length-1;i>0;i--)\n      s+=x[i]+',';\n    s+=x[0];\n  }\n  else { //return it in the given base\n    while (!isZero(s6)) {\n      t=divInt_(s6,base);  //t=s6 % base; s6=floor(s6/base);\n      s=digitsStr.substring(t,t+1)+s;\n    }\n  }\n  if (s.length==0)\n    s=\"0\";\n  return s;\n}\n\n//returns a duplicate of bigInt x\nfunction dup(x) {\n  var i;\n  buff=new Array(x.length);\n  copy_(buff,x);\n  return buff;\n}\n\n//do x=y on bigInts x and y.  x must be an array at least as big as y (not counting the leading zeros in y).\nfunction copy_(x,y) {\n  var i;\n  var k=x.length<y.length ? x.length : y.length;\n  for (i=0;i<k;i++)\n    x[i]=y[i];\n  for (i=k;i<x.length;i++)\n    x[i]=0;\n}\n\n//do x=y on bigInt x and integer y.  \nfunction copyInt_(x,n) {\n  var i,c;\n  for (c=n,i=0;i<x.length;i++) {\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+n where x is a bigInt and n is an integer.\n//x must be large enough to hold the result.\nfunction addInt_(x,n) {\n  var i,k,c,b;\n  x[0]+=n;\n  k=x.length;\n  c=0;\n  for (i=0;i<k;i++) {\n    c+=x[i];\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n    if (!c) return; //stop carrying as soon as the carry is zero\n  }\n}\n\n//right shift bigInt x by n bits.  0 <= n < bpe.\nfunction rightShift_(x,n) {\n  var i;\n  var k=Math.floor(n/bpe);\n  if (k) {\n    for (i=0;i<x.length-k;i++) //right shift x by k elements\n      x[i]=x[i+k];\n    for (;i<x.length;i++)\n      x[i]=0;\n    n%=bpe;\n  }\n  for (i=0;i<x.length-1;i++) {\n    x[i]=mask & ((x[i+1]<<(bpe-n)) | (x[i]>>n));\n  }\n  x[i]>>=n;\n}\n\n//do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement\nfunction halve_(x) {\n  var i;\n  for (i=0;i<x.length-1;i++) {\n    x[i]=mask & ((x[i+1]<<(bpe-1)) | (x[i]>>1));\n  }\n  x[i]=(x[i]>>1) | (x[i] & (radix>>1));  //most significant bit stays the same\n}\n\n//left shift bigInt x by n bits.\nfunction leftShift_(x,n) {\n  var i;\n  var k=Math.floor(n/bpe);\n  if (k) {\n    for (i=x.length; i>=k; i--) //left shift x by k elements\n      x[i]=x[i-k];\n    for (;i>=0;i--)\n      x[i]=0;  \n    n%=bpe;\n  }\n  if (!n)\n    return;\n  for (i=x.length-1;i>0;i--) {\n    x[i]=mask & ((x[i]<<n) | (x[i-1]>>(bpe-n)));\n  }\n  x[i]=mask & (x[i]<<n);\n}\n\n//do x=x*n where x is a bigInt and n is an integer.\n//x must be large enough to hold the result.\nfunction multInt_(x,n) {\n  var i,k,c,b;\n  if (!n)\n    return;\n  k=x.length;\n  c=0;\n  for (i=0;i<k;i++) {\n    c+=x[i]*n;\n    b=0;\n    if (c<0) {\n      b=-(c>>bpe);\n      c+=b*radix;\n    }\n    x[i]=c & mask;\n    c=(c>>bpe)-b;\n  }\n}\n\n//do x=floor(x/n) for bigInt x and integer n, and return the remainder\nfunction divInt_(x,n) {\n  var i,r=0,s;\n  for (i=x.length-1;i>=0;i--) {\n    s=r*radix+x[i];\n    x[i]=Math.floor(s/n);\n    r=s%n;\n  }\n  return r;\n}\n\n//do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.\n//x must be large enough to hold the answer.\nfunction linComb_(x,y,a,b) {\n  var i,c,k,kk;\n  k=x.length<y.length ? x.length : y.length;\n  kk=x.length;\n  for (c=0,i=0;i<k;i++) {\n    c+=a*x[i]+b*y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;i<kk;i++) {\n    c+=a*x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.\n//x must be large enough to hold the answer.\nfunction linCombShift_(x,y,b,ys) {\n  var i,c,k,kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0,i=ys;i<k;i++) {\n    c+=x[i]+b*y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<kk;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\n//x must be large enough to hold the answer.\nfunction addShift_(x,y,ys) {\n  var i,c,k,kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0,i=ys;i<k;i++) {\n    c+=x[i]+y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<kk;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x-(y<<(ys*bpe)) for bigInts x and y, and integers a,b and ys.\n//x must be large enough to hold the answer.\nfunction subShift_(x,y,ys) {\n  var i,c,k,kk;\n  k=x.length<ys+y.length ? x.length : ys+y.length;\n  kk=x.length;\n  for (c=0,i=ys;i<k;i++) {\n    c+=x[i]-y[i-ys];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<kk;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x-y for bigInts x and y.\n//x must be large enough to hold the answer.\n//negative answers will be 2s complement\nfunction sub_(x,y) {\n  var i,c,k,kk;\n  k=x.length<y.length ? x.length : y.length;\n  for (c=0,i=0;i<k;i++) {\n    c+=x[i]-y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<x.length;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x+y for bigInts x and y.\n//x must be large enough to hold the answer.\nfunction add_(x,y) {\n  var i,c,k,kk;\n  k=x.length<y.length ? x.length : y.length;\n  for (c=0,i=0;i<k;i++) {\n    c+=x[i]+y[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n  for (i=k;c && i<x.length;i++) {\n    c+=x[i];\n    x[i]=c & mask;\n    c>>=bpe;\n  }\n}\n\n//do x=x*y for bigInts x and y.  This is faster when y<x.\nfunction mult_(x,y) {\n  var i;\n  if (ss.length!=2*x.length)\n    ss=new Array(2*x.length);\n  copyInt_(ss,0);\n  for (i=0;i<y.length;i++)\n    if (y[i])\n      linCombShift_(ss,x,y[i],i);   //ss=1*ss+y[i]*(x<<(i*bpe))\n  copy_(x,ss);\n}\n\n//do x=x mod n for bigInts x and n.\nfunction mod_(x,n) {\n  if (s4.length!=x.length)\n    s4=dup(x);\n  else\n    copy_(s4,x);\n  if (s5.length!=x.length)\n    s5=dup(x);  \n  divide_(s4,n,s5,x);  //x = remainder of s4 / n\n}\n\n//do x=x*y mod n for bigInts x,y,n.\n//for greater speed, let y<x.\nfunction multMod_(x,y,n) {\n  var i;\n  if (s0.length!=2*x.length)\n    s0=new Array(2*x.length);\n  copyInt_(s0,0);\n  for (i=0;i<y.length;i++)\n    if (y[i])\n      linCombShift_(s0,x,y[i],i);   //s0=1*s0+y[i]*(x<<(i*bpe))\n  mod_(s0,n);\n  copy_(x,s0);\n}\n\n//do x=x*x mod n for bigInts x,n.\nfunction squareMod_(x,n) {\n  var i,j,d,c,kx,kn,k;\n  for (kx=x.length; kx>0 && !x[kx-1]; kx--);  //ignore leading zeros in x\n  k=kx>n.length ? 2*kx : 2*n.length; //k=# elements in the product, which is twice the elements in the larger of x and n\n  if (s0.length!=k) \n    s0=new Array(k);\n  copyInt_(s0,0);\n  for (i=0;i<kx;i++) {\n    c=s0[2*i]+x[i]*x[i];\n    s0[2*i]=c & mask;\n    c>>=bpe;\n    for (j=i+1;j<kx;j++) {\n      c=s0[i+j]+2*x[i]*x[j]+c;\n      s0[i+j]=(c & mask);\n      c>>=bpe;\n    }\n    s0[i+kx]=c;\n  }\n  mod_(s0,n);\n  copy_(x,s0);\n}\n\n//return x with exactly k leading zero elements\nfunction trim(x,k) {\n  var i,y;\n  for (i=x.length; i>0 && !x[i-1]; i--);\n  y=new Array(i+k);\n  copy_(y,x);\n  return y;\n}\n\n//do x=x**y mod n, where x,y,n are bigInts and ** is exponentiation.  0**0=1.\n//this is faster when n is odd.  x usually needs to have as many elements as n.\nfunction powMod_(x,y,n) {\n  var k1,k2,kn,np;\n  if(s7.length!=n.length)\n    s7=dup(n);\n\n  //for even modulus, use a simple square-and-multiply algorithm,\n  //rather than using the more complex Montgomery algorithm.\n  if ((n[0]&1)==0) {\n    copy_(s7,x);\n    copyInt_(x,1);\n    while(!equalsInt(y,0)) {\n      if (y[0]&1)\n        multMod_(x,s7,n);\n      divInt_(y,2);\n      squareMod_(s7,n); \n    }\n    return;\n  }\n\n  //calculate np from n for the Montgomery multiplications\n  copyInt_(s7,0);\n  for (kn=n.length;kn>0 && !n[kn-1];kn--);\n  np=radix-inverseModInt(modInt(n,radix),radix);\n  s7[kn]=1;\n  multMod_(x ,s7,n);   // x = x * 2**(kn*bp) mod n\n\n  if (s3.length!=x.length)\n    s3=dup(x);\n  else\n    copy_(s3,x);\n\n  for (k1=y.length-1;k1>0 & !y[k1]; k1--);  //k1=first nonzero element of y\n  if (y[k1]==0) {  //anything to the 0th power is 1\n    copyInt_(x,1);\n    return;\n  }\n  for (k2=1<<(bpe-1);k2 && !(y[k1] & k2); k2>>=1);  //k2=position of first 1 bit in y[k1]\n  for (;;) {\n    if (!(k2>>=1)) {  //look at next bit of y\n      k1--;\n      if (k1<0) {\n        mont_(x,one,n,np);\n        return;\n      }\n      k2=1<<(bpe-1);\n    }    \n    mont_(x,x,n,np);\n\n    if (k2 & y[k1]) //if next bit is a 1\n      mont_(x,s3,n,np);\n  }\n}\n\n\n//do x=x*y*Ri mod n for bigInts x,y,n, \n//  where Ri = 2**(-kn*bpe) mod n, and kn is the \n//  number of elements in the n array, not \n//  counting leading zeros.  \n//x array must have at least as many elemnts as the n array\n//It's OK if x and y are the same variable.\n//must have:\n//  x,y < n\n//  n is odd\n//  np = -(n^(-1)) mod radix\nfunction mont_(x,y,n,np) {\n  var i,j,c,ui,t,ks;\n  var kn=n.length;\n  var ky=y.length;\n\n  if (sa.length!=kn)\n    sa=new Array(kn);\n    \n  copyInt_(sa,0);\n\n  for (;kn>0 && n[kn-1]==0;kn--); //ignore leading zeros of n\n  for (;ky>0 && y[ky-1]==0;ky--); //ignore leading zeros of y\n  ks=sa.length-1; //sa will never have more than this many nonzero elements.  \n\n  //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers\n  for (i=0; i<kn; i++) {\n    t=sa[0]+x[i]*y[0];\n    ui=((t & mask) * np) & mask;  //the inner \"& mask\" was needed on Safari (but not MSIE) at one time\n    c=(t+ui*n[0]) >> bpe;\n    t=x[i];\n    \n    //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed\n    j=1;\n    for (;j<ky-4;) { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }    \n    for (;j<ky;)   { c+=sa[j]+ui*n[j]+t*y[j];   sa[j-1]=c & mask;   c>>=bpe;   j++; }\n    for (;j<kn-4;) { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++;\n                     c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }  \n    for (;j<kn;)   { c+=sa[j]+ui*n[j];          sa[j-1]=c & mask;   c>>=bpe;   j++; }   \n    for (;j<ks;)   { c+=sa[j];                  sa[j-1]=c & mask;   c>>=bpe;   j++; }  \n    sa[j-1]=c & mask;\n  }\n\n  if (!greater(n,sa))\n    sub_(sa,n);\n  copy_(x,sa);\n}\n\n\n","/** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n\n// CHANGED (tutao.arm)\n// - added option to not use padding in encrypt/decrypt in cbc mode\n// Configured with: ./configure --with-codecArrayBuffer --with-cbc --with-codecBytes --without-ccm --without-ocb2 --without-pbkdf2 --without-convenience --compress=none\n\n\"use strict\";\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n/*global document, window, escape, unescape, module, require, Uint32Array */\n\n/** @namespace The Stanford Javascript Crypto Library, top-level namespace. */\nvar sjcl = {\n  /** @namespace Symmetric ciphers. */\n  cipher: {},\n\n  /** @namespace Hash functions.  Right now only SHA256 is implemented. */\n  hash: {},\n\n  /** @namespace Key exchange functions.  Right now only SRP is implemented. */\n  keyexchange: {},\n  \n  /** @namespace Block cipher modes of operation. */\n  mode: {},\n\n  /** @namespace Miscellaneous.  HMAC and PBKDF2. */\n  misc: {},\n  \n  /**\n   * @namespace Bit array encoders and decoders.\n   *\n   * @description\n   * The members of this namespace are functions which translate between\n   * SJCL's bitArrays and other objects (usually strings).  Because it\n   * isn't always clear which direction is encoding and which is decoding,\n   * the method names are \"fromBits\" and \"toBits\".\n   */\n  codec: {},\n  \n  /** @namespace Exceptions. */\n  exception: {\n    /** @constructor Ciphertext is corrupt. */\n    corrupt: function(message) {\n      this.toString = function() { return \"CORRUPT: \"+this.message; };\n      this.message = message;\n    },\n    \n    /** @constructor Invalid parameter. */\n    invalid: function(message) {\n      this.toString = function() { return \"INVALID: \"+this.message; };\n      this.message = message;\n    },\n    \n    /** @constructor Bug or missing feature in SJCL. @constructor */\n    bug: function(message) {\n      this.toString = function() { return \"BUG: \"+this.message; };\n      this.message = message;\n    },\n\n    /** @constructor Something isn't ready. */\n    notReady: function(message) {\n      this.toString = function() { return \"NOT READY: \"+this.message; };\n      this.message = message;\n    }\n  }\n};\n\nif(typeof module !== 'undefined' && module.exports){\n  module.exports = sjcl;\n}\nif (typeof define === \"function\") {\n    define([], function () {\n        return sjcl;\n    });\n}\n/** @fileOverview Low-level AES implementation.\n *\n * This file contains a low-level implementation of AES, optimized for\n * size and for efficiency on several browsers.  It is based on\n * OpenSSL's aes_core.c, a public-domain implementation by Vincent\n * Rijmen, Antoon Bosselaers and Paulo Barreto.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Schedule out an AES key for both encryption and decryption.  This\n * is a low-level class.  Use a cipher mode to do bulk encryption.\n *\n * @constructor\n * @param {Array} key The key as an array of 4, 6 or 8 words.\n *\n * @class Advanced Encryption Standard (low-level interface)\n */\nsjcl.cipher.aes = function (key) {\n  if (!this._tables[0][0][0]) {\n    this._precompute();\n  }\n  \n  var i, j, tmp,\n    encKey, decKey,\n    sbox = this._tables[0][4], decTable = this._tables[1],\n    keyLen = key.length, rcon = 1;\n  \n  if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n    throw new sjcl.exception.invalid(\"invalid aes key size\");\n  }\n  \n  this._key = [encKey = key.slice(0), decKey = []];\n  \n  // schedule encryption keys\n  for (i = keyLen; i < 4 * keyLen + 28; i++) {\n    tmp = encKey[i-1];\n    \n    // apply sbox\n    if (i%keyLen === 0 || (keyLen === 8 && i%keyLen === 4)) {\n      tmp = sbox[tmp>>>24]<<24 ^ sbox[tmp>>16&255]<<16 ^ sbox[tmp>>8&255]<<8 ^ sbox[tmp&255];\n      \n      // shift rows and add rcon\n      if (i%keyLen === 0) {\n        tmp = tmp<<8 ^ tmp>>>24 ^ rcon<<24;\n        rcon = rcon<<1 ^ (rcon>>7)*283;\n      }\n    }\n    \n    encKey[i] = encKey[i-keyLen] ^ tmp;\n  }\n  \n  // schedule decryption keys\n  for (j = 0; i; j++, i--) {\n    tmp = encKey[j&3 ? i : i - 4];\n    if (i<=4 || j<4) {\n      decKey[j] = tmp;\n    } else {\n      decKey[j] = decTable[0][sbox[tmp>>>24      ]] ^\n                  decTable[1][sbox[tmp>>16  & 255]] ^\n                  decTable[2][sbox[tmp>>8   & 255]] ^\n                  decTable[3][sbox[tmp      & 255]];\n    }\n  }\n};\n\nsjcl.cipher.aes.prototype = {\n  // public\n  /* Something like this might appear here eventually\n  name: \"AES\",\n  blockSize: 4,\n  keySizes: [4,6,8],\n  */\n  \n  /**\n   * Encrypt an array of 4 big-endian words.\n   * @param {Array} data The plaintext.\n   * @return {Array} The ciphertext.\n   */\n  encrypt:function (data) { return this._crypt(data,0); },\n  \n  /**\n   * Decrypt an array of 4 big-endian words.\n   * @param {Array} data The ciphertext.\n   * @return {Array} The plaintext.\n   */\n  decrypt:function (data) { return this._crypt(data,1); },\n  \n  /**\n   * The expanded S-box and inverse S-box tables.  These will be computed\n   * on the client so that we don't have to send them down the wire.\n   *\n   * There are two tables, _tables[0] is for encryption and\n   * _tables[1] is for decryption.\n   *\n   * The first 4 sub-tables are the expanded S-box with MixColumns.  The\n   * last (_tables[01][4]) is the S-box itself.\n   *\n   * @private\n   */\n  _tables: [[[],[],[],[],[]],[[],[],[],[],[]]],\n\n  /**\n   * Expand the S-box tables.\n   *\n   * @private\n   */\n  _precompute: function () {\n   var encTable = this._tables[0], decTable = this._tables[1],\n       sbox = encTable[4], sboxInv = decTable[4],\n       i, x, xInv, d=[], th=[], x2, x4, x8, s, tEnc, tDec;\n\n    // Compute double and third tables\n   for (i = 0; i < 256; i++) {\n     th[( d[i] = i<<1 ^ (i>>7)*283 )^i]=i;\n   }\n   \n   for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n     // Compute sbox\n     s = xInv ^ xInv<<1 ^ xInv<<2 ^ xInv<<3 ^ xInv<<4;\n     s = s>>8 ^ s&255 ^ 99;\n     sbox[x] = s;\n     sboxInv[s] = x;\n     \n     // Compute MixColumns\n     x8 = d[x4 = d[x2 = d[x]]];\n     tDec = x8*0x1010101 ^ x4*0x10001 ^ x2*0x101 ^ x*0x1010100;\n     tEnc = d[s]*0x101 ^ s*0x1010100;\n     \n     for (i = 0; i < 4; i++) {\n       encTable[i][x] = tEnc = tEnc<<24 ^ tEnc>>>8;\n       decTable[i][s] = tDec = tDec<<24 ^ tDec>>>8;\n     }\n   }\n   \n   // Compactify.  Considerable speedup on Firefox.\n   for (i = 0; i < 5; i++) {\n     encTable[i] = encTable[i].slice(0);\n     decTable[i] = decTable[i].slice(0);\n   }\n  },\n  \n  /**\n   * Encryption and decryption core.\n   * @param {Array} input Four words to be encrypted or decrypted.\n   * @param dir The direction, 0 for encrypt and 1 for decrypt.\n   * @return {Array} The four encrypted or decrypted words.\n   * @private\n   */\n  _crypt:function (input, dir) {\n    if (input.length !== 4) {\n      throw new sjcl.exception.invalid(\"invalid aes block size\");\n    }\n    \n    var key = this._key[dir],\n        // state variables a,b,c,d are loaded with pre-whitened data\n        a = input[0]           ^ key[0],\n        b = input[dir ? 3 : 1] ^ key[1],\n        c = input[2]           ^ key[2],\n        d = input[dir ? 1 : 3] ^ key[3],\n        a2, b2, c2,\n        \n        nInnerRounds = key.length/4 - 2,\n        i,\n        kIndex = 4,\n        out = [0,0,0,0],\n        table = this._tables[dir],\n        \n        // load up the tables\n        t0    = table[0],\n        t1    = table[1],\n        t2    = table[2],\n        t3    = table[3],\n        sbox  = table[4];\n \n    // Inner rounds.  Cribbed from OpenSSL.\n    for (i = 0; i < nInnerRounds; i++) {\n      a2 = t0[a>>>24] ^ t1[b>>16 & 255] ^ t2[c>>8 & 255] ^ t3[d & 255] ^ key[kIndex];\n      b2 = t0[b>>>24] ^ t1[c>>16 & 255] ^ t2[d>>8 & 255] ^ t3[a & 255] ^ key[kIndex + 1];\n      c2 = t0[c>>>24] ^ t1[d>>16 & 255] ^ t2[a>>8 & 255] ^ t3[b & 255] ^ key[kIndex + 2];\n      d  = t0[d>>>24] ^ t1[a>>16 & 255] ^ t2[b>>8 & 255] ^ t3[c & 255] ^ key[kIndex + 3];\n      kIndex += 4;\n      a=a2; b=b2; c=c2;\n    }\n        \n    // Last round.\n    for (i = 0; i < 4; i++) {\n      out[dir ? 3&-i : i] =\n        sbox[a>>>24      ]<<24 ^ \n        sbox[b>>16  & 255]<<16 ^\n        sbox[c>>8   & 255]<<8  ^\n        sbox[d      & 255]     ^\n        key[kIndex++];\n      a2=a; a=b; b=c; c=d; d=a2;\n    }\n    \n    return out;\n  }\n};\n\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** @namespace Arrays of bits, encoded as arrays of Numbers.\n *\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nsjcl.bitArray = {\n  /**\n   * Array slices in units of bits.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,\n   * slice until the end of the array.\n   * @return {bitArray} The requested slice.\n   */\n  bitSlice: function (a, bstart, bend) {\n    a = sjcl.bitArray._shiftRight(a.slice(bstart/32), 32 - (bstart & 31)).slice(1);\n    return (bend === undefined) ? a : sjcl.bitArray.clamp(a, bend-bstart);\n  },\n\n  /**\n   * Extract a number packed into a bit array.\n   * @param {bitArray} a The array to slice.\n   * @param {Number} bstart The offset to the start of the slice, in bits.\n   * @param {Number} length The length of the number to extract.\n   * @return {Number} The requested slice.\n   */\n  extract: function(a, bstart, blength) {\n    // FIXME: this Math.floor is not necessary at all, but for some reason\n    // seems to suppress a bug in the Chromium JIT.\n    var x, sh = Math.floor((-bstart-blength) & 31);\n    if ((bstart + blength - 1 ^ bstart) & -32) {\n      // it crosses a boundary\n      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);\n    } else {\n      // within a single word\n      x = a[bstart/32|0] >>> sh;\n    }\n    return x & ((1<<blength) - 1);\n  },\n\n  /**\n   * Concatenate two bit arrays.\n   * @param {bitArray} a1 The first array.\n   * @param {bitArray} a2 The second array.\n   * @return {bitArray} The concatenation of a1 and a2.\n   */\n  concat: function (a1, a2) {\n    if (a1.length === 0 || a2.length === 0) {\n      return a1.concat(a2);\n    }\n    \n    var last = a1[a1.length-1], shift = sjcl.bitArray.getPartial(last);\n    if (shift === 32) {\n      return a1.concat(a2);\n    } else {\n      return sjcl.bitArray._shiftRight(a2, shift, last|0, a1.slice(0,a1.length-1));\n    }\n  },\n\n  /**\n   * Find the length of an array of bits.\n   * @param {bitArray} a The array.\n   * @return {Number} The length of a, in bits.\n   */\n  bitLength: function (a) {\n    var l = a.length, x;\n    if (l === 0) { return 0; }\n    x = a[l - 1];\n    return (l-1) * 32 + sjcl.bitArray.getPartial(x);\n  },\n\n  /**\n   * Truncate an array.\n   * @param {bitArray} a The array.\n   * @param {Number} len The length to truncate to, in bits.\n   * @return {bitArray} A new array, truncated to len bits.\n   */\n  clamp: function (a, len) {\n    if (a.length * 32 < len) { return a; }\n    a = a.slice(0, Math.ceil(len / 32));\n    var l = a.length;\n    len = len & 31;\n    if (l > 0 && len) {\n      a[l-1] = sjcl.bitArray.partial(len, a[l-1] & 0x80000000 >> (len-1), 1);\n    }\n    return a;\n  },\n\n  /**\n   * Make a partial word for a bit array.\n   * @param {Number} len The number of bits in the word.\n   * @param {Number} x The bits.\n   * @param {Number} [0] _end Pass 1 if x has already been shifted to the high side.\n   * @return {Number} The partial word.\n   */\n  partial: function (len, x, _end) {\n    if (len === 32) { return x; }\n    return (_end ? x|0 : x << (32-len)) + len * 0x10000000000;\n  },\n\n  /**\n   * Get the number of bits used by a partial word.\n   * @param {Number} x The partial word.\n   * @return {Number} The number of bits used by the partial word.\n   */\n  getPartial: function (x) {\n    return Math.round(x/0x10000000000) || 32;\n  },\n\n  /**\n   * Compare two arrays for equality in a predictable amount of time.\n   * @param {bitArray} a The first array.\n   * @param {bitArray} b The second array.\n   * @return {boolean} true if a == b; false otherwise.\n   */\n  equal: function (a, b) {\n    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {\n      return false;\n    }\n    var x = 0, i;\n    for (i=0; i<a.length; i++) {\n      x |= a[i]^b[i];\n    }\n    return (x === 0);\n  },\n\n  /** Shift an array right.\n   * @param {bitArray} a The array to shift.\n   * @param {Number} shift The number of bits to shift.\n   * @param {Number} [carry=0] A byte to carry in\n   * @param {bitArray} [out=[]] An array to prepend to the output.\n   * @private\n   */\n  _shiftRight: function (a, shift, carry, out) {\n    var i, last2=0, shift2;\n    if (out === undefined) { out = []; }\n    \n    for (; shift >= 32; shift -= 32) {\n      out.push(carry);\n      carry = 0;\n    }\n    if (shift === 0) {\n      return out.concat(a);\n    }\n    \n    for (i=0; i<a.length; i++) {\n      out.push(carry | a[i]>>>shift);\n      carry = a[i] << (32-shift);\n    }\n    last2 = a.length ? a[a.length-1] : 0;\n    shift2 = sjcl.bitArray.getPartial(last2);\n    out.push(sjcl.bitArray.partial(shift+shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(),1));\n    return out;\n  },\n  \n  /** xor a block of 4 words together.\n   * @private\n   */\n  _xor4: function(x,y) {\n    return [x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]];\n  },\n\n  /** byteswap a word array inplace.\n   * (does not handle partial words)\n   * @param {sjcl.bitArray} a word array\n   * @return {sjcl.bitArray} byteswapped array\n   */\n  byteswapM: function(a) {\n    var i, v, m = 0xff00;\n    for (i = 0; i < a.length; ++i) {\n      v = a[i];\n      a[i] = (v >>> 24) | ((v >>> 8) & m) | ((v & m) << 8) | (v << 24);\n    }\n    return a;\n  }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n \n/** @namespace UTF-8 strings */\nsjcl.codec.utf8String = {\n  /** Convert from a bitArray to a UTF-8 string. */\n  fromBits: function (arr) {\n    var out = \"\", bl = sjcl.bitArray.bitLength(arr), i, tmp;\n    for (i=0; i<bl/8; i++) {\n      if ((i&3) === 0) {\n        tmp = arr[i/4];\n      }\n      // TUTAO: workaround for AOSP WebView on LineageOS Devices\n      var charCode = tmp >>> 24\n      out += String.fromCharCode(Number(String(charCode)));\n      //console.log(\"charCode\", charCode.toString(2), (charCode >>> 0).toString(2), charCode == 108, \"tmp\", \"typeOf\", typeof charCode, tmp, \"out\", out)\n      tmp <<= 8;\n    }\n    return decodeURIComponent(escape(out));\n  },\n  \n  /** Convert from a UTF-8 string to a bitArray. */\n  toBits: function (str) {\n    str = unescape(encodeURIComponent(str));\n    var out = [], i, tmp=0;\n    for (i=0; i<str.length; i++) {\n      tmp = tmp << 8 | str.charCodeAt(i);\n      if ((i&3) === 3) {\n        out.push(tmp);\n        tmp = 0;\n      }\n    }\n    if (i&3) {\n      out.push(sjcl.bitArray.partial(8*(i&3), tmp));\n    }\n    return out;\n  }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** @namespace Hexadecimal */\nsjcl.codec.hex = {\n  /** Convert from a bitArray to a hex string. */\n  fromBits: function (arr) {\n    var out = \"\", i;\n    for (i=0; i<arr.length; i++) {\n      out += ((arr[i]|0)+0xF00000000000).toString(16).substr(4);\n    }\n    return out.substr(0, sjcl.bitArray.bitLength(arr)/4);//.replace(/(.{8})/g, \"$1 \");\n  },\n  /** Convert from a hex string to a bitArray. */\n  toBits: function (str) {\n    var i, out=[], len;\n    str = str.replace(/\\s|0x/g, \"\");\n    len = str.length;\n    str = str + \"00000000\";\n    for (i=0; i<str.length; i+=8) {\n      out.push(parseInt(str.substr(i,8),16)^0);\n    }\n    return sjcl.bitArray.clamp(out, len*4);\n  }\n};\n\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** @namespace Base64 encoding/decoding */\nsjcl.codec.base64 = {\n  /** The base64 alphabet.\n   * @private\n   */\n  _chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n  \n  /** Convert from a bitArray to a base64 string. */\n  fromBits: function (arr, _noEquals, _url) {\n    var out = \"\", i, bits=0, c = sjcl.codec.base64._chars, ta=0, bl = sjcl.bitArray.bitLength(arr);\n    if (_url) {\n      c = c.substr(0,62) + '-_';\n    }\n    for (i=0; out.length * 6 < bl; ) {\n      out += c.charAt((ta ^ arr[i]>>>bits) >>> 26);\n      if (bits < 6) {\n        ta = arr[i] << (6-bits);\n        bits += 26;\n        i++;\n      } else {\n        ta <<= 6;\n        bits -= 6;\n      }\n    }\n    while ((out.length & 3) && !_noEquals) { out += \"=\"; }\n    return out;\n  },\n  \n  /** Convert from a base64 string to a bitArray */\n  toBits: function(str, _url) {\n    str = str.replace(/\\s|=/g,'');\n    var out = [], i, bits=0, c = sjcl.codec.base64._chars, ta=0, x;\n    if (_url) {\n      c = c.substr(0,62) + '-_';\n    }\n    for (i=0; i<str.length; i++) {\n      x = c.indexOf(str.charAt(i));\n      if (x < 0) {\n        throw new sjcl.exception.invalid(\"this isn't base64!\");\n      }\n      if (bits > 26) {\n        bits -= 26;\n        out.push(ta ^ x>>>bits);\n        ta  = x << (32-bits);\n      } else {\n        bits += 6;\n        ta ^= x << (32-bits);\n      }\n    }\n    if (bits&56) {\n      out.push(sjcl.bitArray.partial(bits&56, ta, 1));\n    }\n    return out;\n  }\n};\n\nsjcl.codec.base64url = {\n  fromBits: function (arr) { return sjcl.codec.base64.fromBits(arr,1,1); },\n  toBits: function (str) { return sjcl.codec.base64.toBits(str,1); }\n};\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** @namespace Arrays of bytes */\nsjcl.codec.bytes = {\n  /** Convert from a bitArray to an array of bytes. */\n  fromBits: function (arr) {\n    var out = [], bl = sjcl.bitArray.bitLength(arr), i, tmp;\n    for (i=0; i<bl/8; i++) {\n      if ((i&3) === 0) {\n        tmp = arr[i/4];\n      }\n      out.push(tmp >>> 24);\n      tmp <<= 8;\n    }\n    return out;\n  },\n  /** Convert from an array of bytes to a bitArray. */\n  toBits: function (bytes) {\n    var out = [], i, tmp=0;\n    for (i=0; i<bytes.length; i++) {\n      tmp = tmp << 8 | bytes[i];\n      if ((i&3) === 3) {\n        out.push(tmp);\n        tmp = 0;\n      }\n    }\n    if (i&3) {\n      out.push(sjcl.bitArray.partial(8*(i&3), tmp));\n    }\n    return out;\n  }\n};\n/** @fileOverview Javascript SHA-256 implementation.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * Special thanks to Aldo Cortesi for pointing out several bugs in\n * this code.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Context for a SHA-256 operation in progress.\n * @constructor\n * @class Secure Hash Algorithm, 256 bits.\n */\nsjcl.hash.sha256 = function (hash) {\n  if (!this._key[0]) { this._precompute(); }\n  if (hash) {\n    this._h = hash._h.slice(0);\n    this._buffer = hash._buffer.slice(0);\n    this._length = hash._length;\n  } else {\n    this.reset();\n  }\n};\n\n/**\n * Hash a string or an array of words.\n * @static\n * @param {bitArray|String} data the data to hash.\n * @return {bitArray} The hash value, an array of 16 big-endian words.\n */\nsjcl.hash.sha256.hash = function (data) {\n  return (new sjcl.hash.sha256()).update(data).finalize();\n};\n\nsjcl.hash.sha256.prototype = {\n  /**\n   * The hash's block size, in bits.\n   * @constant\n   */\n  blockSize: 512,\n   \n  /**\n   * Reset the hash state.\n   * @return this\n   */\n  reset:function () {\n    this._h = this._init.slice(0);\n    this._buffer = [];\n    this._length = 0;\n    return this;\n  },\n  \n  /**\n   * Input several words to the hash.\n   * @param {bitArray|String} data the data to hash.\n   * @return this\n   */\n  update: function (data) {\n    if (typeof data === \"string\") {\n      data = sjcl.codec.utf8String.toBits(data);\n    }\n    var i, b = this._buffer = sjcl.bitArray.concat(this._buffer, data),\n        ol = this._length,\n        nl = this._length = ol + sjcl.bitArray.bitLength(data);\n    for (i = 512+ol & -512; i <= nl; i+= 512) {\n      this._block(b.splice(0,16));\n    }\n    return this;\n  },\n  \n  /**\n   * Complete hashing and output the hash value.\n   * @return {bitArray} The hash value, an array of 8 big-endian words.\n   */\n  finalize:function () {\n    var i, b = this._buffer, h = this._h;\n\n    // Round out and push the buffer\n    b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1,1)]);\n    \n    // Round out the buffer to a multiple of 16 words, less the 2 length words.\n    for (i = b.length + 2; i & 15; i++) {\n      b.push(0);\n    }\n    \n    // append the length\n    b.push(Math.floor(this._length / 0x100000000));\n    b.push(this._length | 0);\n\n    while (b.length) {\n      this._block(b.splice(0,16));\n    }\n\n    this.reset();\n    return h;\n  },\n\n  /**\n   * The SHA-256 initialization vector, to be precomputed.\n   * @private\n   */\n  _init:[],\n  /*\n  _init:[0x6a09e667,0xbb67ae85,0x3c6ef372,0xa54ff53a,0x510e527f,0x9b05688c,0x1f83d9ab,0x5be0cd19],\n  */\n  \n  /**\n   * The SHA-256 hash key, to be precomputed.\n   * @private\n   */\n  _key:[],\n  /*\n  _key:\n    [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n     0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n     0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n     0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n     0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n     0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n     0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2],\n  */\n\n\n  /**\n   * Function to precompute _init and _key.\n   * @private\n   */\n  _precompute: function () {\n    var i = 0, prime = 2, factor;\n\n    function frac(x) { return (x-Math.floor(x)) * 0x100000000 | 0; }\n\n    outer: for (; i<64; prime++) {\n      for (factor=2; factor*factor <= prime; factor++) {\n        if (prime % factor === 0) {\n          // not a prime\n          continue outer;\n        }\n      }\n      \n      if (i<8) {\n        this._init[i] = frac(Math.pow(prime, 1/2));\n      }\n      this._key[i] = frac(Math.pow(prime, 1/3));\n      i++;\n    }\n  },\n  \n  /**\n   * Perform one cycle of SHA-256.\n   * @param {bitArray} words one block of words.\n   * @private\n   */\n  _block:function (words) {  \n    var i, tmp, a, b,\n      w = words.slice(0),\n      h = this._h,\n      k = this._key,\n      h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3],\n      h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\n\n    /* Rationale for placement of |0 :\n     * If a value can overflow is original 32 bits by a factor of more than a few\n     * million (2^23 ish), there is a possibility that it might overflow the\n     * 53-bit mantissa and lose precision.\n     *\n     * To avoid this, we clamp back to 32 bits by |'ing with 0 on any value that\n     * propagates around the loop, and on the hash state h[].  I don't believe\n     * that the clamps on h4 and on h0 are strictly necessary, but it's close\n     * (for h4 anyway), and better safe than sorry.\n     *\n     * The clamps on h[] are necessary for the output to be correct even in the\n     * common case and for short inputs.\n     */\n    for (i=0; i<64; i++) {\n      // load up the input word for this round\n      if (i<16) {\n        tmp = w[i];\n      } else {\n        a   = w[(i+1 ) & 15];\n        b   = w[(i+14) & 15];\n        tmp = w[i&15] = ((a>>>7  ^ a>>>18 ^ a>>>3  ^ a<<25 ^ a<<14) + \n                         (b>>>17 ^ b>>>19 ^ b>>>10 ^ b<<15 ^ b<<13) +\n                         w[i&15] + w[(i+9) & 15]) | 0;\n      }\n      \n      tmp = (tmp + h7 + (h4>>>6 ^ h4>>>11 ^ h4>>>25 ^ h4<<26 ^ h4<<21 ^ h4<<7) +  (h6 ^ h4&(h5^h6)) + k[i]); // | 0;\n      \n      // shift register\n      h7 = h6; h6 = h5; h5 = h4;\n      h4 = h3 + tmp | 0;\n      h3 = h2; h2 = h1; h1 = h0;\n\n      h0 = (tmp +  ((h1&h2) ^ (h3&(h1^h2))) + (h1>>>2 ^ h1>>>13 ^ h1>>>22 ^ h1<<30 ^ h1<<19 ^ h1<<10)) | 0;\n    }\n\n    h[0] = h[0]+h0 | 0;\n    h[1] = h[1]+h1 | 0;\n    h[2] = h[2]+h2 | 0;\n    h[3] = h[3]+h3 | 0;\n    h[4] = h[4]+h4 | 0;\n    h[5] = h[5]+h5 | 0;\n    h[6] = h[6]+h6 | 0;\n    h[7] = h[7]+h7 | 0;\n  }\n};\n\n\n/** @fileOverview CBC mode implementation\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\nif (sjcl.beware === undefined) {\n  sjcl.beware = {};\n}\n  /** @namespace\n   * Dangerous: CBC mode with PKCS#5 padding.\n   *\n   * @author Emily Stark\n   * @author Mike Hamburg\n   * @author Dan Boneh\n   */\n  sjcl.mode.cbc = {\n    /** The name of the mode.\n     * @constant\n     */\n    name: \"cbc\",\n    \n    /** Encrypt in CBC mode with PKCS#5 padding.\n     * @param {Object} prp The block cipher.  It must have a block size of 16 bytes.\n     * @param {bitArray} plaintext The plaintext data.\n     * @param {bitArray} iv The initialization value.\n     * @param {bitArray} [adata=[]] The authenticated data.  Must be empty.\n     * @param {boolean} usePadding True if padding shall be used, false otherwise.\n     * @return The encrypted data, an array of bytes.\n     * @throws {sjcl.exception.invalid} if the IV isn't exactly 128 bits, or if any adata is specified.\n     */\n    encrypt: function(prp, plaintext, iv, adata, usePadding) {\n      if (adata && adata.length) {\n        throw new sjcl.exception.invalid(\"cbc can't authenticate data\");\n      }\n      if (sjcl.bitArray.bitLength(iv) !== 128) {\n        throw new sjcl.exception.invalid(\"cbc iv must be 128 bits\");\n      }\n      var i,\n          w = sjcl.bitArray,\n          xor = w._xor4,\n          bl = w.bitLength(plaintext),\n          bp = 0,\n          output = [];\n\n      if (bl&7) {\n        throw new sjcl.exception.invalid(\"pkcs#5 padding only works for multiples of a byte\");\n      }\n    \n      for (i=0; bp+128 <= bl; i+=4, bp+=128) {\n        /* Encrypt a non-final block */\n        iv = prp.encrypt(xor(iv, plaintext.slice(i,i+4)));\n        output.splice(i,0,iv[0],iv[1],iv[2],iv[3]);\n      }\n\n      if (usePadding) {\n        /* Construct the pad. */\n        bl = (16 - ((bl >> 3) & 15)) * 0x1010101;\n\n        /* Pad and encrypt. */\n        iv = prp.encrypt(xor(iv,w.concat(plaintext,[bl,bl,bl,bl]).slice(i,i+4)));\n        output.splice(i,0,iv[0],iv[1],iv[2],iv[3]);\n      }\n      return output;\n    },\n    \n    /** Decrypt in CBC mode.\n     * @param {Object} prp The block cipher.  It must have a block size of 16 bytes.\n     * @param {bitArray} ciphertext The ciphertext data.\n     * @param {bitArray} iv The initialization value.\n     * @param {bitArray} [adata=[]] The authenticated data.  It must be empty.\n     * @param {boolean} usePadding True if padding shall be used, false otherwise.\n     * @return The decrypted data, an array of bytes.\n     * @throws {sjcl.exception.invalid} if the IV isn't exactly 128 bits, or if any adata is specified.\n     * @throws {sjcl.exception.corrupt} if if the message is corrupt.\n     */\n    decrypt: function(prp, ciphertext, iv, adata, usePadding) {\n      if (adata && adata.length) {\n        throw new sjcl.exception.invalid(\"cbc can't authenticate data\");\n      }\n      if (sjcl.bitArray.bitLength(iv) !== 128) {\n        throw new sjcl.exception.invalid(\"cbc iv must be 128 bits\");\n      }\n      if ((sjcl.bitArray.bitLength(ciphertext) & 127) || !ciphertext.length) {\n        throw new sjcl.exception.corrupt(\"cbc ciphertext must be a positive multiple of the block size\");\n      }\n      var i,\n          w = sjcl.bitArray,\n          xor = w._xor4,\n          bi, bo,\n          output = [];\n          \n      adata = adata || [];\n    \n      for (i=0; i<ciphertext.length; i+=4) {\n        bi = ciphertext.slice(i,i+4);\n        bo = xor(iv,prp.decrypt(bi));\n        output.splice(i,0,bo[0],bo[1],bo[2],bo[3]);\n        iv = bi;\n      }\n\n      if (usePadding) {\n        /* check and remove the pad */\n        bi = output[i-1] & 255;\n        if (bi === 0 || bi > 16) {\n          throw new sjcl.exception.corrupt(\"pkcs#5 padding corrupt\");\n        }\n        bo = bi * 0x1010101;\n        if (!w.equal(w.bitSlice([bo,bo,bo,bo], 0, bi*8),\n                     w.bitSlice(output, output.length*32 - bi*8, output.length*32))) {\n          throw new sjcl.exception.corrupt(\"pkcs#5 padding corrupt\");\n        }\n\n        return w.bitSlice(output, 0, output.length*32 - bi*8);\n      } else {\n        return output;\n      }\n    }\n};\n/** @fileOverview GCM mode implementation.\n *\n * @author Juho Vähä-Herttua\n */\n\n/** @namespace Galois/Counter mode. */\nsjcl.mode.gcm = {\n  /** The name of the mode.\n   * @constant\n   */\n  name: \"gcm\",\n  \n  /** Encrypt in GCM mode.\n   * @static\n   * @param {Object} prf The pseudorandom function.  It must have a block size of 16 bytes.\n   * @param {bitArray} plaintext The plaintext data.\n   * @param {bitArray} iv The initialization value.\n   * @param {bitArray} [adata=[]] The authenticated data.\n   * @param {Number} [tlen=128] The desired tag length, in bits.\n   * @return {bitArray} The encrypted data, an array of bytes.\n   */\n  encrypt: function (prf, plaintext, iv, adata, tlen) {\n    var out, data = plaintext.slice(0), w=sjcl.bitArray;\n    tlen = tlen || 128;\n    adata = adata || [];\n\n    // encrypt and tag\n    out = sjcl.mode.gcm._ctrMode(true, prf, data, adata, iv, tlen);\n\n    return w.concat(out.data, out.tag);\n  },\n  \n  /** Decrypt in GCM mode.\n   * @static\n   * @param {Object} prf The pseudorandom function.  It must have a block size of 16 bytes.\n   * @param {bitArray} ciphertext The ciphertext data.\n   * @param {bitArray} iv The initialization value.\n   * @param {bitArray} [adata=[]] The authenticated data.\n   * @param {Number} [tlen=128] The desired tag length, in bits.\n   * @return {bitArray} The decrypted data.\n   */\n  decrypt: function (prf, ciphertext, iv, adata, tlen) {\n    var out, data = ciphertext.slice(0), tag, w=sjcl.bitArray, l=w.bitLength(data);\n    tlen = tlen || 128;\n    adata = adata || [];\n\n    // Slice tag out of data\n    if (tlen <= l) {\n      tag = w.bitSlice(data, l-tlen);\n      data = w.bitSlice(data, 0, l-tlen);\n    } else {\n      tag = data;\n      data = [];\n    }\n\n    // decrypt and tag\n    out = sjcl.mode.gcm._ctrMode(false, prf, data, adata, iv, tlen);\n\n    if (!w.equal(out.tag, tag)) {\n      throw new sjcl.exception.corrupt(\"gcm: tag doesn't match\");\n    }\n    return out.data;\n  },\n\n  /* Compute the galois multiplication of X and Y\n   * @private\n   */\n  _galoisMultiply: function (x, y) {\n    var i, j, xi, Zi, Vi, lsb_Vi, w=sjcl.bitArray, xor=w._xor4;\n\n    Zi = [0,0,0,0];\n    Vi = y.slice(0);\n\n    // Block size is 128 bits, run 128 times to get Z_128\n    for (i=0; i<128; i++) {\n      xi = (x[Math.floor(i/32)] & (1 << (31-i%32))) !== 0;\n      if (xi) {\n        // Z_i+1 = Z_i ^ V_i\n        Zi = xor(Zi, Vi);\n      }\n\n      // Store the value of LSB(V_i)\n      lsb_Vi = (Vi[3] & 1) !== 0;\n\n      // V_i+1 = V_i >> 1\n      for (j=3; j>0; j--) {\n        Vi[j] = (Vi[j] >>> 1) | ((Vi[j-1]&1) << 31);\n      }\n      Vi[0] = Vi[0] >>> 1;\n\n      // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R\n      if (lsb_Vi) {\n        Vi[0] = Vi[0] ^ (0xe1 << 24);\n      }\n    }\n    return Zi;\n  },\n\n  _ghash: function(H, Y0, data) {\n    var Yi, i, l = data.length;\n\n    Yi = Y0.slice(0);\n    for (i=0; i<l; i+=4) {\n      Yi[0] ^= 0xffffffff&data[i];\n      Yi[1] ^= 0xffffffff&data[i+1];\n      Yi[2] ^= 0xffffffff&data[i+2];\n      Yi[3] ^= 0xffffffff&data[i+3];\n      Yi = sjcl.mode.gcm._galoisMultiply(Yi, H);\n    }\n    return Yi;\n  },\n\n  /** GCM CTR mode.\n   * Encrypt or decrypt data and tag with the prf in GCM-style CTR mode.\n   * @param {Boolean} encrypt True if encrypt, false if decrypt.\n   * @param {Object} prf The PRF.\n   * @param {bitArray} data The data to be encrypted or decrypted.\n   * @param {bitArray} iv The initialization vector.\n   * @param {bitArray} adata The associated data to be tagged.\n   * @param {Number} tlen The length of the tag, in bits.\n   */\n  _ctrMode: function(encrypt, prf, data, adata, iv, tlen) {\n    var H, J0, S0, enc, i, ctr, tag, last, l, bl, abl, ivbl, w=sjcl.bitArray;\n\n    // Calculate data lengths\n    l = data.length;\n    bl = w.bitLength(data);\n    abl = w.bitLength(adata);\n    ivbl = w.bitLength(iv);\n\n    // Calculate the parameters\n    H = prf.encrypt([0,0,0,0]);\n    if (ivbl === 96) {\n      J0 = iv.slice(0);\n      J0 = w.concat(J0, [1]);\n    } else {\n      J0 = sjcl.mode.gcm._ghash(H, [0,0,0,0], iv);\n      J0 = sjcl.mode.gcm._ghash(H, J0, [0,0,Math.floor(ivbl/0x100000000),ivbl&0xffffffff]);\n    }\n    S0 = sjcl.mode.gcm._ghash(H, [0,0,0,0], adata);\n\n    // Initialize ctr and tag\n    ctr = J0.slice(0);\n    tag = S0.slice(0);\n\n    // If decrypting, calculate hash\n    if (!encrypt) {\n      tag = sjcl.mode.gcm._ghash(H, S0, data);\n    }\n\n    // Encrypt all the data\n    for (i=0; i<l; i+=4) {\n       ctr[3]++;\n       enc = prf.encrypt(ctr);\n       data[i]   ^= enc[0];\n       data[i+1] ^= enc[1];\n       data[i+2] ^= enc[2];\n       data[i+3] ^= enc[3];\n    }\n    data = w.clamp(data, bl);\n\n    // If encrypting, calculate hash\n    if (encrypt) {\n      tag = sjcl.mode.gcm._ghash(H, S0, data);\n    }\n\n    // Calculate last block from bit lengths, ugly because bitwise operations are 32-bit\n    last = [\n      Math.floor(abl/0x100000000), abl&0xffffffff,\n      Math.floor(bl/0x100000000), bl&0xffffffff\n    ];\n\n    // Calculate the final tag block\n    tag = sjcl.mode.gcm._ghash(H, tag, last);\n    enc = prf.encrypt(J0);\n    tag[0] ^= enc[0];\n    tag[1] ^= enc[1];\n    tag[2] ^= enc[2];\n    tag[3] ^= enc[3];\n\n    return { tag:w.bitSlice(tag, 0, tlen), data:data };\n  }\n};\n/** @fileOverview HMAC implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** HMAC with the specified hash function.\n * @constructor\n * @param {bitArray} key the key for HMAC.\n * @param {Object} [hash=sjcl.hash.sha256] The hash function to use.\n */\nsjcl.misc.hmac = function (key, Hash) {\n  this._hash = Hash = Hash || sjcl.hash.sha256;\n  var exKey = [[],[]], i,\n      bs = Hash.prototype.blockSize / 32;\n  this._baseHash = [new Hash(), new Hash()];\n\n  if (key.length > bs) {\n    key = Hash.hash(key);\n  }\n  \n  for (i=0; i<bs; i++) {\n    exKey[0][i] = key[i]^0x36363636;\n    exKey[1][i] = key[i]^0x5C5C5C5C;\n  }\n  \n  this._baseHash[0].update(exKey[0]);\n  this._baseHash[1].update(exKey[1]);\n  this._resultHash = new Hash(this._baseHash[0]);\n};\n\n/** HMAC with the specified hash function.  Also called encrypt since it's a prf.\n * @param {bitArray|String} data The data to mac.\n */\nsjcl.misc.hmac.prototype.encrypt = sjcl.misc.hmac.prototype.mac = function (data) {\n  if (!this._updated) {\n    this.update(data);\n    return this.digest(data);\n  } else {\n    throw new sjcl.exception.invalid(\"encrypt on already updated hmac called!\");\n  }\n};\n\nsjcl.misc.hmac.prototype.reset = function () {\n  this._resultHash = new this._hash(this._baseHash[0]);\n  this._updated = false;\n};\n\nsjcl.misc.hmac.prototype.update = function (data) {\n  this._updated = true;\n  this._resultHash.update(data);\n};\n\nsjcl.misc.hmac.prototype.digest = function () {\n  var w = this._resultHash.finalize(), result = new (this._hash)(this._baseHash[1]).update(w).finalize();\n\n  this.reset();\n\n  return result;\n};/** @fileOverview Random number generator.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n * @author Michael Brooks\n */\n\n/** @constructor\n * @class Random number generator\n * @description\n * <b>Use sjcl.random as a singleton for this class!</b>\n * <p>\n * This random number generator is a derivative of Ferguson and Schneier's\n * generator Fortuna.  It collects entropy from various events into several\n * pools, implemented by streaming SHA-256 instances.  It differs from\n * ordinary Fortuna in a few ways, though.\n * </p>\n *\n * <p>\n * Most importantly, it has an entropy estimator.  This is present because\n * there is a strong conflict here between making the generator available\n * as soon as possible, and making sure that it doesn't \"run on empty\".\n * In Fortuna, there is a saved state file, and the system is likely to have\n * time to warm up.\n * </p>\n *\n * <p>\n * Second, because users are unlikely to stay on the page for very long,\n * and to speed startup time, the number of pools increases logarithmically:\n * a new pool is created when the previous one is actually used for a reseed.\n * This gives the same asymptotic guarantees as Fortuna, but gives more\n * entropy to early reseeds.\n * </p>\n *\n * <p>\n * The entire mechanism here feels pretty klunky.  Furthermore, there are\n * several improvements that should be made, including support for\n * dedicated cryptographic functions that may be present in some browsers;\n * state files in local storage; cookies containing randomness; etc.  So\n * look for improvements in future versions.\n * </p>\n */\nsjcl.prng = function(defaultParanoia) {\n  \n  /* private */\n  this._pools                   = [new sjcl.hash.sha256()];\n  this._poolEntropy             = [0];\n  this._reseedCount             = 0;\n  this._robins                  = {};\n  this._eventId                 = 0;\n  \n  this._collectorIds            = {};\n  this._collectorIdNext         = 0;\n  \n  this._strength                = 0;\n  this._poolStrength            = 0;\n  this._nextReseed              = 0;\n  this._key                     = [0,0,0,0,0,0,0,0];\n  this._counter                 = [0,0,0,0];\n  this._cipher                  = undefined;\n  this._defaultParanoia         = defaultParanoia;\n  \n  /* event listener stuff */\n  this._collectorsStarted       = false;\n  this._callbacks               = {progress: {}, seeded: {}};\n  this._callbackI               = 0;\n  \n  /* constants */\n  this._NOT_READY               = 0;\n  this._READY                   = 1;\n  this._REQUIRES_RESEED         = 2;\n\n  this._MAX_WORDS_PER_BURST     = 65536;\n  this._PARANOIA_LEVELS         = [0,48,64,96,128,192,256,384,512,768,1024];\n  this._MILLISECONDS_PER_RESEED = 30000;\n  this._BITS_PER_RESEED         = 80;\n};\n \nsjcl.prng.prototype = {\n  /** Generate several random words, and return them in an array.\n   * A word consists of 32 bits (4 bytes)\n   * @param {Number} nwords The number of words to generate.\n   */\n  randomWords: function (nwords, paranoia) {\n    var out = [], i, readiness = this.isReady(paranoia), g;\n  \n    if (readiness === this._NOT_READY) {\n      throw new sjcl.exception.notReady(\"generator isn't seeded\");\n    } else if (readiness & this._REQUIRES_RESEED) {\n      this._reseedFromPools(!(readiness & this._READY));\n    }\n  \n    for (i=0; i<nwords; i+= 4) {\n      if ((i+1) % this._MAX_WORDS_PER_BURST === 0) {\n        this._gate();\n      }\n   \n      g = this._gen4words();\n      out.push(g[0],g[1],g[2],g[3]);\n    }\n    this._gate();\n  \n    return out.slice(0,nwords);\n  },\n  \n  setDefaultParanoia: function (paranoia, allowZeroParanoia) {\n    if (paranoia === 0 && allowZeroParanoia !== \"Setting paranoia=0 will ruin your security; use it only for testing\") {\n      throw \"Setting paranoia=0 will ruin your security; use it only for testing\";\n    }\n\n    this._defaultParanoia = paranoia;\n  },\n  \n  /**\n   * Add entropy to the pools.\n   * @param data The entropic value.  Should be a 32-bit integer, array of 32-bit integers, or string\n   * @param {Number} estimatedEntropy The estimated entropy of data, in bits\n   * @param {String} source The source of the entropy, eg \"mouse\"\n   */\n  addEntropy: function (data, estimatedEntropy, source) {\n    source = source || \"user\";\n  \n    var id,\n      i, tmp,\n      t = (new Date()).valueOf(),\n      robin = this._robins[source],\n      oldReady = this.isReady(), err = 0, objName;\n      \n    id = this._collectorIds[source];\n    if (id === undefined) { id = this._collectorIds[source] = this._collectorIdNext ++; }\n      \n    if (robin === undefined) { robin = this._robins[source] = 0; }\n    this._robins[source] = ( this._robins[source] + 1 ) % this._pools.length;\n  \n    switch(typeof(data)) {\n      \n    case \"number\":\n      if (estimatedEntropy === undefined) {\n        estimatedEntropy = 1;\n      }\n      this._pools[robin].update([id,this._eventId++,1,estimatedEntropy,t,1,data|0]);\n      break;\n      \n    case \"object\":\n      objName = Object.prototype.toString.call(data);\n      if (objName === \"[object Uint32Array]\") {\n        tmp = [];\n        for (i = 0; i < data.length; i++) {\n          tmp.push(data[i]);\n        }\n        data = tmp;\n      } else {\n        if (objName !== \"[object Array]\") {\n          err = 1;\n        }\n        for (i=0; i<data.length && !err; i++) {\n          if (typeof(data[i]) !== \"number\") {\n            err = 1;\n          }\n        }\n      }\n      if (!err) {\n        if (estimatedEntropy === undefined) {\n          /* horrible entropy estimator */\n          estimatedEntropy = 0;\n          for (i=0; i<data.length; i++) {\n            tmp= data[i];\n            while (tmp>0) {\n              estimatedEntropy++;\n              tmp = tmp >>> 1;\n            }\n          }\n        }\n        this._pools[robin].update([id,this._eventId++,2,estimatedEntropy,t,data.length].concat(data));\n      }\n      break;\n      \n    case \"string\":\n      if (estimatedEntropy === undefined) {\n       /* English text has just over 1 bit per character of entropy.\n        * But this might be HTML or something, and have far less\n        * entropy than English...  Oh well, let's just say one bit.\n        */\n       estimatedEntropy = data.length;\n      }\n      this._pools[robin].update([id,this._eventId++,3,estimatedEntropy,t,data.length]);\n      this._pools[robin].update(data);\n      break;\n      \n    default:\n      err=1;\n    }\n    if (err) {\n      throw new sjcl.exception.bug(\"random: addEntropy only supports number, array of numbers or string\");\n    }\n  \n    /* record the new strength */\n    this._poolEntropy[robin] += estimatedEntropy;\n    this._poolStrength += estimatedEntropy;\n  \n    /* fire off events */\n      /* TUTAO.arm: removed bad implementation: _fireEvent calls static randomizer instance\n    if (oldReady === this._NOT_READY) {\n      if (this.isReady() !== this._NOT_READY) {\n        this._fireEvent(\"seeded\", Math.max(this._strength, this._poolStrength));\n      }\n      this._fireEvent(\"progress\", this.getProgress());\n    }*/\n  },\n  \n  /** Is the generator ready? */\n  isReady: function (paranoia) {\n    var entropyRequired = this._PARANOIA_LEVELS[ (paranoia !== undefined) ? paranoia : this._defaultParanoia ];\n  \n    if (this._strength && this._strength >= entropyRequired) {\n      return (this._poolEntropy[0] > this._BITS_PER_RESEED && (new Date()).valueOf() > this._nextReseed) ?\n        this._REQUIRES_RESEED | this._READY :\n        this._READY;\n    } else {\n      return (this._poolStrength >= entropyRequired) ?\n        this._REQUIRES_RESEED | this._NOT_READY :\n        this._NOT_READY;\n    }\n  },\n  \n  /** Get the generator's progress toward readiness, as a fraction */\n  getProgress: function (paranoia) {\n    var entropyRequired = this._PARANOIA_LEVELS[ paranoia ? paranoia : this._defaultParanoia ];\n  \n    if (this._strength >= entropyRequired) {\n      return 1.0;\n    } else {\n      return (this._poolStrength > entropyRequired) ?\n        1.0 :\n        this._poolStrength / entropyRequired;\n    }\n  },\n  \n  /** start the built-in entropy collectors */\n  startCollectors: function () {\n    if (this._collectorsStarted) { return; }\n  \n    this._eventListener = {\n      loadTimeCollector: this._bind(this._loadTimeCollector),\n      mouseCollector: this._bind(this._mouseCollector),\n      keyboardCollector: this._bind(this._keyboardCollector),\n      accelerometerCollector: this._bind(this._accelerometerCollector),\n      touchCollector: this._bind(this._touchCollector)\n    };\n\n    if (window.addEventListener) {\n      window.addEventListener(\"load\", this._eventListener.loadTimeCollector, false);\n      window.addEventListener(\"mousemove\", this._eventListener.mouseCollector, false);\n      window.addEventListener(\"keypress\", this._eventListener.keyboardCollector, false);\n      window.addEventListener(\"devicemotion\", this._eventListener.accelerometerCollector, false);\n      window.addEventListener(\"touchmove\", this._eventListener.touchCollector, false);\n    } else if (document.attachEvent) {\n      document.attachEvent(\"onload\", this._eventListener.loadTimeCollector);\n      document.attachEvent(\"onmousemove\", this._eventListener.mouseCollector);\n      document.attachEvent(\"keypress\", this._eventListener.keyboardCollector);\n    } else {\n      throw new sjcl.exception.bug(\"can't attach event\");\n    }\n  \n    this._collectorsStarted = true;\n  },\n  \n  /** stop the built-in entropy collectors */\n  stopCollectors: function () {\n    if (!this._collectorsStarted) { return; }\n  \n    if (window.removeEventListener) {\n      window.removeEventListener(\"load\", this._eventListener.loadTimeCollector, false);\n      window.removeEventListener(\"mousemove\", this._eventListener.mouseCollector, false);\n      window.removeEventListener(\"keypress\", this._eventListener.keyboardCollector, false);\n      window.removeEventListener(\"devicemotion\", this._eventListener.accelerometerCollector, false);\n      window.removeEventListener(\"touchmove\", this._eventListener.touchCollector, false);\n    } else if (document.detachEvent) {\n      document.detachEvent(\"onload\", this._eventListener.loadTimeCollector);\n      document.detachEvent(\"onmousemove\", this._eventListener.mouseCollector);\n      document.detachEvent(\"keypress\", this._eventListener.keyboardCollector);\n    }\n\n    this._collectorsStarted = false;\n  },\n  \n  /* use a cookie to store entropy.\n  useCookie: function (all_cookies) {\n      throw new sjcl.exception.bug(\"random: useCookie is unimplemented\");\n  },*/\n  \n  /** add an event listener for progress or seeded-ness. */\n  addEventListener: function (name, callback) {\n    this._callbacks[name][this._callbackI++] = callback;\n  },\n  \n  /** remove an event listener for progress or seeded-ness */\n  removeEventListener: function (name, cb) {\n    var i, j, cbs=this._callbacks[name], jsTemp=[];\n\n    /* I'm not sure if this is necessary; in C++, iterating over a\n     * collection and modifying it at the same time is a no-no.\n     */\n\n    for (j in cbs) {\n      if (cbs.hasOwnProperty(j) && cbs[j] === cb) {\n        jsTemp.push(j);\n      }\n    }\n\n    for (i=0; i<jsTemp.length; i++) {\n      j = jsTemp[i];\n      delete cbs[j];\n    }\n  },\n  \n  _bind: function (func) {\n    var that = this;\n    return function () {\n      func.apply(that, arguments);\n    };\n  },\n\n  /** Generate 4 random words, no reseed, no gate.\n   * @private\n   */\n  _gen4words: function () {\n    for (var i=0; i<4; i++) {\n      this._counter[i] = this._counter[i]+1 | 0;\n      if (this._counter[i]) { break; }\n    }\n    return this._cipher.encrypt(this._counter);\n  },\n  \n  /* Rekey the AES instance with itself after a request, or every _MAX_WORDS_PER_BURST words.\n   * @private\n   */\n  _gate: function () {\n    this._key = this._gen4words().concat(this._gen4words());\n    this._cipher = new sjcl.cipher.aes(this._key);\n  },\n  \n  /** Reseed the generator with the given words\n   * @private\n   */\n  _reseed: function (seedWords) {\n    this._key = sjcl.hash.sha256.hash(this._key.concat(seedWords));\n    this._cipher = new sjcl.cipher.aes(this._key);\n    for (var i=0; i<4; i++) {\n      this._counter[i] = this._counter[i]+1 | 0;\n      if (this._counter[i]) { break; }\n    }\n  },\n  \n  /** reseed the data from the entropy pools\n   * @param full If set, use all the entropy pools in the reseed.\n   */\n  _reseedFromPools: function (full) {\n    var reseedData = [], strength = 0, i;\n  \n    this._nextReseed = reseedData[0] =\n      (new Date()).valueOf() + this._MILLISECONDS_PER_RESEED;\n    \n    for (i=0; i<16; i++) {\n      /* On some browsers, this is cryptographically random.  So we might\n       * as well toss it in the pot and stir...\n       */\n      reseedData.push(Math.random()*0x100000000|0);\n    }\n    \n    for (i=0; i<this._pools.length; i++) {\n     reseedData = reseedData.concat(this._pools[i].finalize());\n     strength += this._poolEntropy[i];\n     this._poolEntropy[i] = 0;\n   \n     if (!full && (this._reseedCount & (1<<i))) { break; }\n    }\n  \n    /* if we used the last pool, push a new one onto the stack */\n    if (this._reseedCount >= 1 << this._pools.length) {\n     this._pools.push(new sjcl.hash.sha256());\n     this._poolEntropy.push(0);\n    }\n  \n    /* how strong was this reseed? */\n    this._poolStrength -= strength;\n    if (strength > this._strength) {\n      this._strength = strength;\n    }\n  \n    this._reseedCount ++;\n    this._reseed(reseedData);\n  },\n  \n  _keyboardCollector: function () {\n    this._addCurrentTimeToEntropy(1);\n  },\n  \n  _mouseCollector: function (ev) {\n    var x, y;\n\n    try {\n      x = ev.x || ev.clientX || ev.offsetX || 0;\n      y = ev.y || ev.clientY || ev.offsetY || 0;\n    } catch (err) {\n      // Event originated from a secure element. No mouse position available.\n      x = 0;\n      y = 0;\n    }\n\n    if (x != 0 && y!= 0) {\n      sjcl.random.addEntropy([x,y], 2, \"mouse\");\n    }\n\n    this._addCurrentTimeToEntropy(0);\n  },\n\n  _touchCollector: function(ev) {\n    var touch = ev.touches[0] || ev.changedTouches[0];\n    var x = touch.pageX || touch.clientX,\n        y = touch.pageY || touch.clientY;\n\n    sjcl.random.addEntropy([x,y],1,\"touch\");\n\n    this._addCurrentTimeToEntropy(0);\n  },\n  \n  _loadTimeCollector: function () {\n    this._addCurrentTimeToEntropy(2);\n  },\n\n  _addCurrentTimeToEntropy: function (estimatedEntropy) {\n    if (typeof window !== 'undefined' && window.performance && typeof window.performance.now === \"function\") {\n      //how much entropy do we want to add here?\n      sjcl.random.addEntropy(window.performance.now(), estimatedEntropy, \"loadtime\");\n    } else {\n      sjcl.random.addEntropy((new Date()).valueOf(), estimatedEntropy, \"loadtime\");\n    }\n  },\n  _accelerometerCollector: function (ev) {\n    var ac = ev.accelerationIncludingGravity.x||ev.accelerationIncludingGravity.y||ev.accelerationIncludingGravity.z;\n    if(window.orientation){\n      var or = window.orientation;\n      if (typeof or === \"number\") {\n        sjcl.random.addEntropy(or, 1, \"accelerometer\");\n      }\n    }\n    if (ac) {\n      sjcl.random.addEntropy(ac, 2, \"accelerometer\");\n    }\n    this._addCurrentTimeToEntropy(0);\n  },\n\n  _fireEvent: function (name, arg) {\n    var j, cbs=sjcl.random._callbacks[name], cbsTemp=[];\n    /* TODO: there is a race condition between removing collectors and firing them */\n\n    /* I'm not sure if this is necessary; in C++, iterating over a\n     * collection and modifying it at the same time is a no-no.\n     */\n\n    for (j in cbs) {\n      if (cbs.hasOwnProperty(j)) {\n        cbsTemp.push(cbs[j]);\n      }\n    }\n\n    for (j=0; j<cbsTemp.length; j++) {\n      cbsTemp[j](arg);\n    }\n  }\n};\n\n/** an instance for the prng.\n* @see sjcl.prng\n*/\n/* TUTAO.arm: removed static randomizer instance because we have our own\nsjcl.random = new sjcl.prng(6);\n\n(function(){\n  // function for getting nodejs crypto module. catches and ignores errors.\n  function getCryptoModule() {\n    try {\n      return require('crypto');\n    }\n    catch (e) {\n      return null;\n    }\n  }\n\n  try {\n    var buf, crypt, ab;\n\n    // get cryptographically strong entropy depending on runtime environment\n    if (typeof module !== 'undefined' && module.exports && (crypt = getCryptoModule()) && crypt.randomBytes) {\n      buf = crypt.randomBytes(1024/8);\n      buf = new Uint32Array(new Uint8Array(buf).buffer);\n      sjcl.random.addEntropy(buf, 1024, \"crypto.randomBytes\");\n\n    } else if (typeof window !== 'undefined' && typeof Uint32Array !== 'undefined') {\n      ab = new Uint32Array(32);\n      if (window.crypto && window.crypto.getRandomValues) {\n        window.crypto.getRandomValues(ab);\n      } else if (window.msCrypto && window.msCrypto.getRandomValues) {\n        window.msCrypto.getRandomValues(ab);\n      } else {\n        return;\n      }\n\n      // get cryptographically strong entropy in Webkit\n      sjcl.random.addEntropy(ab, 1024, \"crypto.getRandomValues\");\n\n    } else {\n      // no getRandomValues :-(\n    }\n  } catch (e) {\n    if (typeof window !== 'undefined' && window.console) {\n      console.log(\"There was an error collecting entropy from the browser:\");\n      console.log(e);\n      //we do not want the library to fail due to randomness not being maintained.\n    }\n  }\n}());*/\n/** @fileOverview Bit array codec implementations.\n *\n * @author Marco Munizaga\n */\n\n//patch arraybuffers if they don't exist\nif (typeof(ArrayBuffer) === 'undefined') {\n  (function(globals){\n      \"use strict\";\n      globals.ArrayBuffer = function(){};\n      globals.DataView = function(){};\n  }(this));\n}\n\n/** @namespace ArrayBuffer */\nsjcl.codec.arrayBuffer = {\n  /** Convert from a bitArray to an ArrayBuffer. \n   * Will default to 8byte padding if padding is undefined*/\n  fromBits: function (arr, padding, padding_count) {\n    var out, i, ol, tmp, smallest;\n    padding = padding==undefined  ? true : padding\n    padding_count = padding_count || 8\n\n    if (arr.length === 0) {\n      return new ArrayBuffer(0);\n    }\n\n    ol = sjcl.bitArray.bitLength(arr)/8;\n\n    //check to make sure the bitLength is divisible by 8, if it isn't \n    //we can't do anything since arraybuffers work with bytes, not bits\n    if ( sjcl.bitArray.bitLength(arr)%8 !== 0 ) {\n      throw new sjcl.exception.invalid(\"Invalid bit size, must be divisble by 8 to fit in an arraybuffer correctly\")\n    }\n\n    if (padding && ol%padding_count !== 0){\n      ol += padding_count - (ol%padding_count);\n    }\n\n\n    //padded temp for easy copying\n    tmp = new DataView(new ArrayBuffer(arr.length*4));\n    for (i=0; i<arr.length; i++) {\n      tmp.setUint32(i*4, (arr[i]<<32)); //get rid of the higher bits\n    }\n\n    //now copy the final message if we are not going to 0 pad\n    out = new DataView(new ArrayBuffer(ol));\n\n    //save a step when the tmp and out bytelength are ===\n    if (out.byteLength === tmp.byteLength){\n      return tmp.buffer;\n    }\n\n    smallest = tmp.byteLength < out.byteLength ? tmp.byteLength : out.byteLength;\n    for(i=0; i<smallest; i++){\n      out.setUint8(i,tmp.getUint8(i));\n    }\n\n\n    return out.buffer\n  },\n\n  toBits: function (buffer) {\n    var i, out=[], len, inView, tmp;\n\n    if (buffer.byteLength === 0) {\n      return [];\n    }\n\n    inView = new DataView(buffer);\n    len = inView.byteLength - inView.byteLength%4;\n\n    for (var i = 0; i < len; i+=4) {\n      out.push(inView.getUint32(i));\n    }\n\n    if (inView.byteLength%4 != 0) {\n      tmp = new DataView(new ArrayBuffer(4));\n      for (var i = 0, l = inView.byteLength%4; i < l; i++) {\n        //we want the data to the right, because partial slices off the starting bits\n        tmp.setUint8(i+4-l, inView.getUint8(len+i)); // big-endian, \n      }\n      out.push(\n        sjcl.bitArray.partial( (inView.byteLength%4)*8, tmp.getUint32(0) )\n      ); \n    }\n    return out;\n  },\n\n\n\n  /** Prints a hex output of the buffer contents, akin to hexdump **/\n  hexDumpBuffer: function(buffer){\n      var stringBufferView = new DataView(buffer)\n      var string = ''\n      var pad = function (n, width) {\n          n = n + '';\n          return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;\n      }\n\n      for (var i = 0; i < stringBufferView.byteLength; i+=2) {\n          if (i%16 == 0) string += ('\\n'+(i).toString(16)+'\\t')\n          string += ( pad(stringBufferView.getUint16(i).toString(16),4) + ' ')\n      }\n\n      if ( typeof console === undefined ){\n        console = console || {log:function(){}} //fix for IE\n      }\n      console.log(string.toUpperCase())\n  }\n};\n\n","\"use strict\";\n\ntutao.provide('SecureRandom');\n\n/**\n * This randomizer does not generate random numbers itself but acts as a proxy. It only provides random numbers if it was feeded with values via setNextRandomBytes().\n * @constructor\n */\nvar SecureRandom = function() {\n};\n\nSecureRandom._nextBytes = [];\n\n/**\n * Only this function is used by jsbn for getting random bytes. Each byte is a value between 0 and 255.\n * @param {Array} array An array to fill with random bytes. The length of the array defines the number of bytes to create.\n */\nSecureRandom.prototype.nextBytes = function(array) {\n    if (SecureRandom._nextBytes.length < array.length) {\n        throw new Error(\"SecureRandom does not have random numbers.\");\n    }\n    var bytes = SecureRandom._nextBytes.splice(0,array.length);\n    for (var i=0;i<array.length;i++) {\n        array[i] = bytes[i];\n    }\n};\n\n/**\n * Sets the bytes of this randomizer which are provided in the subsequent calls to generateRandomData().\n * @param {Array} array An array of random bytes\n */\nSecureRandom.setNextRandomBytes = function(bytes) {\n    SecureRandom._nextBytes = bytes;\n};","\"use strict\";\n\ntutao.provide('tutao.crypto.Oaep');\n\n/**\n * @constructor\n * @see https://tools.ietf.org/html/rfc3447#section-7.1\n */\ntutao.crypto.Oaep = function () {\n    this.utils = new tutao.crypto.Utils();\n};\n\n/**\n * @param {Array.<number>} value The byte array to encode.\n * @param {number} keyLength The length of the RSA key in bit.\n * @param {Array.<number>} seed An array of random bytes of 256 bytes.\n * @return {Array.<number>} The padded byte array.\n */\ntutao.crypto.Oaep.prototype.pad = function (value, keyLength, seed) {\n    var hashLength = 32; // bytes sha256\n    if (seed.length != hashLength) {\n        throw new Error(\"invalid seed length: \" + seed.length + \". expected: \" + hashLength + \" bytes!\");\n    }\n    if (value.length > (keyLength / 8 - hashLength - 1)) {\n        throw new Error(\"invalid value length: \" + value.length + \". expected: max. \" + (keyLength / 8 - hashLength - 1));\n    }\n\n    var block = this._getPSBlock(value, keyLength);\n\n    var dbMask = this.utils.mgf1(seed, block.length - hashLength);\n\n    for (var i = hashLength; i < block.length; i++) {\n        block[i] ^= dbMask[i - hashLength];\n    }\n\n    // same as invoking sha256 directly because only one block is hashed\n    var seedMask = this.utils.mgf1(block.slice(hashLength, block.length), hashLength);\n\n    for (var i = 0; i < seedMask.length; i++) {\n        block[i] = seed[i] ^ seedMask[i];\n    }\n\n    return block;\n};\n\n/**\n * @param {Array.<number>} value The byte array to unpad.\n * @param {number} keyLength The length of the RSA key in bit.\n * @return {Array.<number>} The unpadded byte array.\n */\ntutao.crypto.Oaep.prototype.unpad = function (value, keyLength) {\n    var hashLength = 32; // bytes sha256\n    if (value.length != keyLength / 8 - 1) {\n        throw new Error(\"invalid value length: \" + value.length + \". expected: \" + (keyLength / 8 - 1) + \" bytes!\");\n    }\n\n    var seedMask = this.utils.mgf1(value.slice(hashLength, value.length), hashLength);\n    var seed = [];\n    seed.length = hashLength;\n    for (var i = 0; i < seedMask.length; i++) {\n        seed[i] = value[i] ^ seedMask[i];\n    }\n\n    var dbMask = this.utils.mgf1(seed, value.length - hashLength);\n\n    for (var i = hashLength; i < value.length; i++) {\n        value[i] ^= dbMask[i - hashLength];\n    }\n\n    // check that the zeros and the one is there\n    for (var index = 2 * hashLength; index < value.length; index++) {\n        if (value[index] == 1) {\n            // found the 0x01\n            break;\n        } else if (value[index] != 0 || index == value.length) {\n            throw new Error(\"invalid padding\");\n        }\n    }\n\n    return value.slice(index + 1, value.length);\n};\n\n/**\n * Provides a block of keyLength / 8 - 1 bytes with the following format:\n * [ zeros ] [ label hash ] [ zeros ] [ 1 ] [ value ]\n *    32           32    keyLen-2*32-2  1  value.length\n * The label is the hash of an empty string like defined in PKCS#1 v2.1\n */\ntutao.crypto.Oaep.prototype._getPSBlock = function (value, keyLength) {\n    var hashLength = 32; // bytes sha256\n    var blockLength = keyLength / 8 - 1; // the leading byte shall be 0 to make the resulting value in any case smaller than the modulus, so we just leave the byte off\n    var block = [];\n    block.length = blockLength;\n\n    var hash = new sjcl.hash.sha256();\n    hash.update([]); // empty label\n    var defHash = sjcl.codec.bytes.fromBits(hash.finalize());\n\n    var nbrOfZeros = block.length - (1 + value.length);\n    for (var i = 0; i < block.length; i++) {\n        if (i >= hashLength && i < 2 * hashLength) {\n            block[i] = defHash[i - hashLength];\n        } else if (i < nbrOfZeros) {\n            block[i] = 0;\n        } else if (i == nbrOfZeros) {\n            block[i] = 1;\n        } else {\n            block[i] = value[i - nbrOfZeros - 1];\n        }\n    }\n    return block;\n};\n","\"use strict\";\n\ntutao.provide('tutao.crypto.Pss');\n\n/**\n * @constructor\n * @see https://tools.ietf.org/html/rfc3447#section-9.1\n */\ntutao.crypto.Pss = function () {\n    this.utils = new tutao.crypto.Utils();\n};\n\n/**\n * @param {Array.<number>} message The byte array to encode.\n * @param {number} keyLength The length of the RSA key in bit.\n * @param {Array.<number>} salt An array of random bytes of 256 bytes.\n * @return {Array.<number>} The padded byte array.\n */\ntutao.crypto.Pss.prototype.encode = function (message, keyLength, salt) {\n    var hashLength = 32; // bytes sha256\n    var emLen = Math.ceil(keyLength / 8);\n    if (salt.length != hashLength) {\n        throw new Error(\"invalid salt length: \" + salt.length + \". expected: \" + hashLength + \" bytes!\");\n    }\n    var length = hashLength + salt.length + 2;\n    if (emLen < length) {\n        throw new Error(\"invalid hash/salt length: \" + length + \". expected: max. \" + emLen);\n    }\n    var emBits = keyLength - 1;\n    var minEmBitsLength = 8 * hashLength + 8 * salt.length + 9;\n    if (emBits < minEmBitsLength) {\n        throw new Error(\"invalid maximum emBits length. Was \" + emBits + \", expected: \" + minEmBitsLength);\n    }\n\n    var messageHash = sjcl.codec.bytes.fromBits(sjcl.hash.sha256.hash(sjcl.codec.bytes.toBits(message)));\n\n    //  M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt;\n    var message2 = [0,0,0,0,0,0,0,0].concat(messageHash, salt);\n\n    var message2Hash = sjcl.codec.bytes.fromBits(sjcl.hash.sha256.hash(sjcl.codec.bytes.toBits(message2)));\n\n    var ps = [];\n    ps.length = emLen - salt.length - hashLength - 2;\n    for (var i = 0; i < ps.length; i++) {\n        ps[i] = 0;\n    }\n\n    var db = ps.concat([1], salt);\n    this._clear(ps);\n    var expectedDbLength = emLen - hashLength - 1;\n    if (db.length != expectedDbLength) {\n        throw new Error(\"unexpected length of block: \" + db.length + \". Expected: \" + expectedDbLength);\n    }\n\n    var dbMask = this.utils.mgf1(message2Hash, emLen - message2Hash.length - 1);\n    var maskedDb = [];\n    for (var i = 0; i < dbMask.length; i++) {\n        maskedDb[i] = db[i] ^ dbMask[i];\n    }\n    this._clear(db);\n\n    maskedDb[0] &= (0xff >> (8 * emLen - emBits));\n\n    var em = maskedDb.concat(message2Hash, [188]); // 0xbc\n    this._clear(maskedDb);\n\n    return em;\n};\n\n/**\n * @param {Array.<number>} message The message to verify.\n * @param {Array.<number>} encodedMessage The encodedMessage to verify against.\n * @param {number} keyLength The length of the RSA key in bit.\n * @return {Array.<Error>} An error occurs, if it was not possible to verify the signature.\n */\ntutao.crypto.Pss.prototype.verify = function (message, encodedMessage, keyLength) {\n    var hashLength = 32; // bytes sha256\n    var saltLength = hashLength;\n    var emLen = Math.ceil(keyLength / 8);\n    var minEncodedLength = hashLength + saltLength + 2;\n    try {\n\n        if (encodedMessage.length < minEncodedLength) {\n            throw new Error(\"invalid length of encoded message: \" + encodedMessage.length + \". expected: > \" + minEncodedLength + \" bytes!\");\n        }\n        if(encodedMessage[encodedMessage.length -1] != 188) {\n            throw new Error(\"rightmost octet of EM must be 188 (0xbc) but was \" + encodedMessage[encodedMessage.length -1]);\n        }\n\n        var maskedDB = encodedMessage.slice(0, emLen - hashLength - 1);\n        var hash = encodedMessage.slice(emLen - hashLength - 1, emLen - hashLength - 1 + hashLength);\n\n        // If the leftmost 8emLen - emBits bits of the leftmost octet in maskedDB are not all equal to zero, output \"inconsistent\" and stop.\n        if ((maskedDB[0] >> 8 - (8 * emLen - keyLength)) != 0) {\n            throw new Error(\"inconsistent leftmost octet in maskedDB.\");\n        }\n\n        var dbMask = this.utils.mgf1(hash, emLen - hashLength - 1);\n\n        var db = [];\n        for (var i=0; i < dbMask.length; i++) {\n            db[i] = maskedDB[i] ^ dbMask[i];\n        }\n\n        db[0] &= (0xff >> (8 * emLen - keyLength));\n\n        for (var i = 1; i < emLen - hashLength - saltLength - 2; i++) {\n            if (db[i] != 0) {\n                throw new Error(\"inconsistent leftmost octets of db.\");\n            }\n        }\n\n        if (db[emLen - hashLength - saltLength - 1] != 1) {\n            throw new Error(\"inconsistent octet value in db. Expected 1 (0x01) but was \" + db[emLen - hashLength - saltLength - 1]);\n        }\n\n        var salt = db.slice(db.length - saltLength);\n\n        var messageHash = sjcl.codec.bytes.fromBits(sjcl.hash.sha256.hash(sjcl.codec.bytes.toBits(message)));\n        var message2 = [0,0,0,0,0,0,0,0].concat(messageHash, salt);\n        var message2Hash = sjcl.codec.bytes.fromBits(sjcl.hash.sha256.hash(sjcl.codec.bytes.toBits(message2)));\n\n        if (!tutao.util.ArrayUtils.arrayEquals(hash, message2Hash)) {\n            throw new Error(\"Hashes do not match\");\n        }\n    } finally {\n        this._clear(message);\n        this._clear(encodedMessage);\n        this._clear(maskedDB);\n        this._clear(hash);\n        this._clear(dbMask);\n        this._clear(db);\n        this._clear(salt);\n        this._clear(messageHash);\n        this._clear(message2);\n        this._clear(message2Hash);\n    }\n};\n\n/**\n * clears an array to contain only zeros (0)\n */\ntutao.crypto.Pss.prototype._clear = function (array) {\n    if (!array) {\n        return;\n    }\n    for (var i = 0; i < array.length; i++) {\n        array[i] = 0;\n    }\n};","\"use strict\";\n\ntutao.provide('tutao.crypto.Utils');\n\n/**\n * @constructor\n */\ntutao.crypto.Utils = function () {\n\n};\n\n/**\n * @param {Array.<Number>} seed An array of byte values.\n * @param {Number} length The length of the return value in bytes.\n */\ntutao.crypto.Utils.prototype.mgf1 = function (seed, length) {\n    var C = null;\n    var counter = 0;\n    var hash = new sjcl.hash.sha256();\n    var T = [];\n\n    var seedSjclArray = sjcl.codec.bytes.toBits(seed);\n\n    do {\n        C = this.i2osp(counter);\n        var cSjclArray = sjcl.codec.bytes.toBits(C);\n\n        hash.update(seedSjclArray);\n        hash.update(cSjclArray);\n        T = sjcl.bitArray.concat(T, hash.finalize());\n    } while (++counter < Math.ceil(length / (256 / 8)));\n\n    var slice = sjcl.bitArray.bitSlice(T, 0, length * 8);\n    return sjcl.codec.bytes.fromBits(slice);\n};\n\n/**\n * converts an integer to a 4 byte array\n */\ntutao.crypto.Utils.prototype.i2osp = function (i) {\n    var array = [];\n    array.push((i >> 24) & 255);\n    array.push((i >> 16) & 255);\n    array.push((i >> 8) & 255);\n    array.push((i >> 0) & 255);\n    return array;\n};\n\ntutao.crypto.Utils.PADDING_BLOCK_LENGTH = 16;\n\ntutao.crypto.Utils.pad = function(bytes) {\n    var paddingLength = tutao.crypto.Utils.PADDING_BLOCK_LENGTH - (bytes.byteLength % tutao.crypto.Utils.PADDING_BLOCK_LENGTH);\n    var padding = new Uint8Array(paddingLength);\n    padding.fill(paddingLength);\n    return tutao.crypto.Utils.concat(bytes, padding);\n};\n\ntutao.crypto.Utils.unpad = function(bytes) {\n    var paddingLength = bytes[bytes.byteLength - 1];\n    if (paddingLength == 0 || paddingLength > bytes.byteLength || paddingLength > tutao.crypto.Utils.PADDING_BLOCK_LENGTH) {\n        throw new tutao.crypto.CryptoError(\"invalid padding: \" + paddingLength);\n    }\n    var length = bytes.byteLength - paddingLength;\n\tvar result = new Uint8Array(length);\n    result.set(bytes.subarray(0,length)); // or is a subarray fine here instead of a copy?\n\treturn result;\n};\n\ntutao.crypto.Utils.concat = function(bytes1, bytes2) {\n    var dstBuffer = new Uint8Array(bytes1.byteLength + bytes2.byteLength);\n    dstBuffer.set(bytes1, 0);\n    dstBuffer.set(bytes2, bytes1.byteLength);\n    return dstBuffer;\n};\n\n/**\n * Creates the auth verifier from the password key.\n * @param passwordKey The key.\n * @returns {string} The auth verifier, encoded as base64 string.\n */\ntutao.crypto.Utils.createAuthVerifier = function (passwordKey) {\n    return tutao.util.EncodingConverter.uint8ArrayToBase64(tutao.locator.shaCrypter.hash(tutao.util.EncodingConverter.keyToUint8Array(passwordKey)));\n};\n\n/**\n * Provides the information if a key is 128 or 256 bit length.\n * @param {bitArray} key The key.\n * @returns {bool} True if the key length is 128, false if the key length is 256 bit.\n * @throws {tutao.crypto.CryptoError} If the key is not 128 bit and not 256 bit.\n */\ntutao.crypto.Utils.checkIs128BitKey = function(key) {\n    var bitLength = sjcl.bitArray.bitLength(key);\n    if (bitLength == 128) {\n        return true;\n    } else if (bitLength == 256) {\n        return false;\n    } else {\n        throw new tutao.crypto.CryptoError(\"invalid key bit length: \" + bitLength);\n    }\n};\n","\"use strict\";\n\ntutao.provide('tutao.util.EncodingConverter');\n\n/**\n * Converts the given key to an Uint8Array.\n * @param {bitArray} key The key.\n * @return {Uint8Array} The uint8array key.\n */\ntutao.util.EncodingConverter.keyToUint8Array = function(key) {\n    return new Uint8Array(sjcl.codec.arrayBuffer.fromBits(key));\n};\n\n/**\n * Converts the given uint8array to a key.\n * @param {Uint8Array} uint8Array The uint8Array key.\n * @return {bitArray} The key.\n * @throws {tutao.crypto.CryptoError} If the conversion fails.\n */\ntutao.util.EncodingConverter.uint8ArrayToKey = function(uint8Array) {\n    return sjcl.codec.arrayBuffer.toBits(uint8Array.buffer);\n};\n\n\n/**\n * Converts the given key to a base64 coded string.\n * @param {bitArray} key The key.\n * @return {String} The base64 coded string representation of the key.\n */\ntutao.util.EncodingConverter.keyToBase64 = function(key) {\n    return sjcl.codec.base64.fromBits(key);\n};\n\n/**\n * Converts the given base64 coded string to a key.\n * @param {String} base64 The base64 coded string representation of the key.\n * @return {bitArray} The key.\n * @throws {tutao.crypto.CryptoError} If the conversion fails.\n */\ntutao.util.EncodingConverter.base64ToKey = function(base64) {\n    try {\n        return sjcl.codec.base64.toBits(base64);\n    } catch (e) {\n        throw new tutao.crypto.CryptoError(\"hex to aes key failed\", e);\n    }\n};\n\n/**\n * Converts a hex coded string into a base64 coded string.\n *\n * @param {String} hex A hex encoded string.\n * @return {String} A base64 encoded string.\n */\ntutao.util.EncodingConverter.hexToBase64 = function(hex) {\n\treturn sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(hex));\n};\n\n/**\n * Converts a base64 coded string into a hex coded string.\n *\n * @param {String} base64 A base64 encoded string.\n * @return {String} A hex encoded string.\n */\ntutao.util.EncodingConverter.base64ToHex = function(base64) {\n\treturn sjcl.codec.hex.fromBits(sjcl.codec.base64.toBits(base64));\n};\n\n/**\n * Converts a base64 string to a url-conform base64 string. This is used for\n * base64 coded url parameters.\n *\n * @param {string} base64 The base64 string.\n * @return {string} The base64url string.\n */\ntutao.util.EncodingConverter.base64ToBase64Url = function(base64) {\n\tvar base64url = base64.replace(/\\+/g, \"-\");\n\tbase64url = base64url.replace(/\\//g, \"_\");\n\tbase64url = base64url.replace(/=/g, \"\");\n\treturn base64url;\n};\n\n/**\n * Converts a base64 string to a base64ext string. Base64ext uses another character set than base64 in order to make it sortable.\n * \n *\n * @param {string} base64 The base64 string.\n * @return {string} The base64url string.\n */\ntutao.util.EncodingConverter.base64ToBase64Ext = function(base64) {\n\tvar base64Alphabet =  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\tvar base64extAlphabet = \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\";\n\n\tbase64 = base64.replace(/=/g, \"\");\n\tvar base64ext = new Array(base64.length);\n\tfor (var i = 0; i < base64.length; i++) {\n\t\tvar index = base64Alphabet.indexOf(base64.charAt(i));\n\t\tbase64ext[i] = base64extAlphabet[index];\n\t}\n\treturn base64ext.join(\"\");\n};\n\n/**\n * Converts a timestamp number to a GeneratedId (the counter is set to zero) in hex format. \n * \n * @param {number} timestamp The timestamp of the GeneratedId\n * @return {string} The GeneratedId as hex string.\n */\ntutao.util.EncodingConverter.timestampToHexGeneratedId = function(timestamp) {\n\tvar id = timestamp * 4; // shifted 2 bits left, so the value covers 44 bits overall (42 timestamp + 2 shifted)\n\tvar hex = parseInt(id).toString(16) + \"0000000\"; // add one zero for the missing 4 bits plus 6 more (3 bytes) to get 9 bytes \n\t// add leading zeros to reach 9 bytes (GeneratedId length) = 18 hex\n\tfor (var length = hex.length; length < 18; length++) {\n\t\thex = \"0\" + hex;\n\t}\n\treturn hex;\n};\n\n/**\n * Converts a timestamp number to a GeneratedId (the counter is set to zero).\n * \n * @param {number} timestamp The timestamp of the GeneratedId\n * @return {string} The GeneratedId.\n */\ntutao.util.EncodingConverter.timestampToGeneratedId = function(timestamp) {\n\tvar hex = tutao.util.EncodingConverter.timestampToHexGeneratedId(timestamp);\n\treturn tutao.util.EncodingConverter.base64ToBase64Ext(tutao.util.EncodingConverter.hexToBase64(hex));\n};\n\n/**\n * Converts a base64 url string to a \"normal\" base64 string. This is used for\n * base64 coded url parameters.\n *\n * @param {string} base64url The base64 url string.\n * @return {string} The base64 string.\n */\ntutao.util.EncodingConverter.base64UrlToBase64 = function(base64url) {\n\tvar base64 = base64url.replace(/\\-/g, \"+\");\n\tbase64 = base64.replace(/_/g, \"/\");\n\tvar nbrOfRemainingChars = base64.length % 4;\n\tif (nbrOfRemainingChars === 0) {\n\t\treturn base64;\n\t} else if (nbrOfRemainingChars === 2) {\n\t\treturn base64 + \"==\";\n\t} else if (nbrOfRemainingChars === 3) {\n\t\treturn base64 + \"=\";\n\t}\n\tthrow new Error(\"Illegal base64 string.\");\n};\n\n/**\n * Converts a string to a Uint8Array containing a UTF-8 string data.\n *\n * @param {string} string The string to convert.\n * @return {Uint8Array} The array.\n */\ntutao.util.EncodingConverter.stringToUtf8Uint8Array = function(string) {\n    var utf8 = unescape(encodeURIComponent(string));\n    var uint8Array = new Uint8Array(utf8.length);\n    for (var i = 0; i < utf8.length; i++) {\n        uint8Array[i] = utf8.charCodeAt(i);\n    }\n    return uint8Array;\n};\n\n/**\n * Converts an Uint8Array containing UTF-8 string data into a string.\n *\n * @param {Uint8Array} uint8Array The Uint8Array.\n * @return {string} The string.\n */\ntutao.util.EncodingConverter.utf8Uint8ArrayToString = function(uint8Array) {\n    return decodeURIComponent(escape(String.fromCharCode.apply(null, uint8Array)));\n};\n\ntutao.util.EncodingConverter.hexToUint8Array = function(hex) {\n\tvar bufView = new Uint8Array(hex.length / 2);\n\tfor (var i=0; i<bufView.byteLength; i++) {\n\t\tbufView[i] = parseInt(hex.substring(i * 2, i * 2 + 2), 16);\n\t}\n\treturn bufView;\n};\n\ntutao.util.EncodingConverter.uint8ArrayToHex = function(uint8Array) {\n\tvar hexDigits = '0123456789abcdef';\n\tvar hex = \"\";\n\tfor (var i=0; i<uint8Array.byteLength; i++) {\n\t\tvar value = uint8Array[i];\n\t\thex += hexDigits[value >> 4] + hexDigits[value & 15];\n\t}\n\treturn hex;\n};\n\n/**\n * Converts an Uint8Array to a Base64 encoded string.\n *\n * @param {Uint8Array} bytes The bytes to convert.\n * @return {string} The Base64 encoded string.\n */\ntutao.util.EncodingConverter.uint8ArrayToBase64 = function(bytes) {\n    var binary = '';\n    var len = bytes.byteLength;\n    for (var i = 0; i < len; i++) {\n        binary += String.fromCharCode( bytes[ i ] );\n    }\n    return btoa(binary);\n};\n\n/**\n * Converts a base64 encoded string to a Uint8Array.\n *\n * @param {string} base64 The Base64 encoded string.\n * @return {Uint8Array} The bytes.\n */\ntutao.util.EncodingConverter.base64ToUint8Array = function(base64) {\n    return new Uint8Array(atob(base64).split(\"\").map(function(c) {\n        return c.charCodeAt(0);\n    }));\n};\n","\"use strict\";\n\ntutao.provide('tutao.crypto.AesInterface');\n\n/**\n * This Interface provides an abstraction of the AES cryptographic implementation.\n * A concrete instance is bound by the Locator.\n * @interface\n */\ntutao.crypto.AesInterface = function() {};\n\ntutao.crypto.AesInterface.IV_BYTE_LENGTH = 16;\ntutao.crypto.AesInterface.IV_BIT_LENGTH = tutao.crypto.AesInterface.IV_BYTE_LENGTH * 8;\ntutao.crypto.AesInterface.TAG_BYTE_LENGTH = 16;\ntutao.crypto.AesInterface.TAG_BIT_LENGTH = tutao.crypto.AesInterface.TAG_BYTE_LENGTH * 8;\n\n/**\n * Creates a random key. The key length depends on the specific implementation of this interface.\n * @return {bitArray} The created key.\n */\ntutao.crypto.AesInterface.prototype.generateRandomKey = function() {};\n\n/**\n * Encrypts an utf8 coded string with AES.\n * @param {bitArray} key The key to use for the encryption.\n * @param {String} utf8 Utf8 coded data.\n * @return {String} The encrypted text, base64 coded.\n * @throws {tutao.crypto.CryptoError} If the encryption fails.\n */\ntutao.crypto.AesInterface.prototype.encryptUtf8 = function(key, utf8) {};\n\n/**\n * Decrypts base64 coded binary data with AES to a utf8 string.\n * @param {bitArray} key The key to use for the decryption.\n * @param {String} base64 A base64 coded string that was encrypted with the same key before.\n * @return {String} The decrypted text, utf8 coded.\n * @throws {tutao.crypto.CryptoError} If the decryption fails.\n */\ntutao.crypto.AesInterface.prototype.decryptUtf8 = function(key, base64) {};\n\n/**\n * Encrypts an utf8 coded string with AES with a static initialization vector for search indices.\n * @param {bitArray} key The key to use for the encryption.\n * @param {String} utf8 Utf8 coded data.\n * @return {String} The encrypted text, base64 coded.\n * @throws {tutao.crypto.CryptoError} If the encryption fails.\n */\ntutao.crypto.AesInterface.prototype.encryptUtf8Index = function(key, utf8) {};\n\n/**\n * Decrypts base64 coded binary data with AES to a utf8 string with a static initialization vector for search indices.\n * @param {bitArray} key The key to use for the decryption.\n * @param {String} base64 A base64 coded string that was encrypted with the same key before.\n * @return {String} The decrypted text, utf8 coded.\n * @throws {tutao.crypto.CryptoError} If the decryption fails.\n */\ntutao.crypto.AesInterface.prototype.decryptUtf8Index = function(key, base64) {};\n\n\n/**\n * Encrypts bytes coded as base64 with AES.\n * @param {bitArray} key The key to use for the encryption.\n * @param {String} base64 Bas64 coded bytes.\n * @return {String} The encrypted bytes, base64 coded.\n * @throws {tutao.crypto.CryptoError} If the encryption fails.\n */\ntutao.crypto.AesInterface.prototype.encryptBytes = function(key, base64) {};\n\n/**\n * Decrypts base64 coded binary data with AES to bytes.\n * @param {bitArray} key The key to use for the decryption.\n * @param {String} base64 A base64 coded string that represents the encrypted bytes that weres encrypted with the same key before.\n * @return {String} The decrypted bytes, base64 coded.\n * @throws {tutao.crypto.CryptoError} If the decryption fails.\n */\ntutao.crypto.AesInterface.prototype.decryptBytes = function(key, base64) {};\n\n/**\n * Encrypts a hex coded key with AES.\n * @param {bitArray} key The key to use for the encryption.\n * @param {bitArray} keyToEncrypt The key that shall be encrypted.\n * @return {String} The encrypted key, base64 coded.\n * @throws {tutao.crypto.CryptoError} If the encryption fails.\n */\ntutao.crypto.AesInterface.prototype.encryptKey = function(key, keyToEncrypt) {};\n\n/**\n * Decrypts a base64 coded key with AES.\n * @param {bitArray} key The key to use for the decryption.\n * @param {String} base64 The key that shall be decrypted, base64 coded.\n * @return {bitArray} The decrypted key.\n * @throws {tutao.crypto.CryptoError} If the decryption fails.\n */\ntutao.crypto.AesInterface.prototype.decryptKey = function(key, base64) {};\n\n/**\n * Encrypts a hex coded RSA private key with AES.\n * @param {bitArray} key The key to use for the encryption.\n * @param {String} hexRsaPrivateKey The key that shall be encrypted, hex coded.\n * @return {String} The encrypted key, base64 coded.\n * @throws {tutao.crypto.CryptoError} If the encryption fails.\n */\ntutao.crypto.AesInterface.prototype.encryptPrivateRsaKey = function(key, hexRsaPrivateKey) {};\n\n/**\n * Decrypts an encrypted private RSA key with AES.\n * @param {bitArray} key The key to use for the decryption.\n * @param {String} base64 The key that shall be decrypted, base64 coded.\n * @return {String} The decrypted private RSA key, hex coded.\n * @throws {tutao.crypto.CryptoError} If the decryption fails.\n */\ntutao.crypto.AesInterface.prototype.decryptPrivateRsaKey = function(key, base64) {};\n","\"use strict\";\n\ntutao.provide('tutao.crypto.SjclAes128CbcAsync');\n\n/**\n * @constructor\n * @implements {tutao.crypto.AesInterfaceAsync}\n */\ntutao.crypto.SjclAes128CbcAsync = function() {\n    this._byteKeyLength = 16; // for a 128 Bit key;\n};\n\n/**\n * @inheritDoc\n */\ntutao.crypto.SjclAes128CbcAsync.prototype.encryptBytes = function (key, bytes, randomIv, resultCallback) {\n    try {\n        var iv = sjcl.codec.arrayBuffer.toBits(randomIv.buffer);\n        var xor = sjcl.bitArray._xor4;\n        var uint32ArraysPerBlock = this._byteKeyLength / 4;\n        var prp = new sjcl.cipher.aes(key);\n        // the floor'ed division cuts off a last partial block which must be padded. if no partial block exists a padding block must be added.\n        // so in both cases a padded block is added plus a block for the iv\n        var nbrOfFullSrcBlocks = Math.floor(bytes.length / this._byteKeyLength);\n\n        var dstBuffer = new ArrayBuffer((nbrOfFullSrcBlocks + 2) * this._byteKeyLength);\n        var srcDataView = new DataView(bytes.buffer);\n        var dstDataView = new DataView(dstBuffer);\n\n        // put the iv into first destination block\n        for (var i = 0; i < uint32ArraysPerBlock; i++) {\n            dstDataView.setUint32(i * 4, this._int32ToUint32(iv[i]), false);\n        }\n\n        // encrypt full src blocks\n        var plainBlock = [0, 0, 0, 0]; // dummy initialization\n        for (var i = 0; i < (nbrOfFullSrcBlocks * uint32ArraysPerBlock); i += uint32ArraysPerBlock) {\n            plainBlock[0] = srcDataView.getUint32(i * 4, false);\n            plainBlock[1] = srcDataView.getUint32((i + 1) * 4, false);\n            plainBlock[2] = srcDataView.getUint32((i + 2) * 4, false);\n            plainBlock[3] = srcDataView.getUint32((i + 3) * 4, false);\n            iv = prp.encrypt(xor(iv, plainBlock));\n            var dstBlockOffset = (uint32ArraysPerBlock + i) * 4;\n            dstDataView.setUint32(dstBlockOffset, this._int32ToUint32(iv[0]), false);\n            dstDataView.setUint32(dstBlockOffset + 4, this._int32ToUint32(iv[1]), false);\n            dstDataView.setUint32(dstBlockOffset + 8, this._int32ToUint32(iv[2]), false);\n            dstDataView.setUint32(dstBlockOffset + 12, this._int32ToUint32(iv[3]), false);\n        }\n\n        // padding\n        var srcDataViewLastBlock = new DataView(new ArrayBuffer(this._byteKeyLength));\n        var i;\n        // copy the remaining bytes to the last block\n        var nbrOfRemainingSrcBytes = bytes.length - nbrOfFullSrcBlocks * this._byteKeyLength;\n        for (i = 0; i < nbrOfRemainingSrcBytes; i++) {\n            srcDataViewLastBlock.setUint8(i, srcDataView.getUint8(nbrOfFullSrcBlocks * this._byteKeyLength + i));\n        }\n        // fill the last block with padding bytes\n        var paddingByte = this._byteKeyLength - (bytes.length % this._byteKeyLength);\n        for (; i < this._byteKeyLength; i++) {\n            srcDataViewLastBlock.setUint8(i, paddingByte);\n        }\n        plainBlock[0] = srcDataViewLastBlock.getUint32(0, false);\n        plainBlock[1] = srcDataViewLastBlock.getUint32(4, false);\n        plainBlock[2] = srcDataViewLastBlock.getUint32(8, false);\n        plainBlock[3] = srcDataViewLastBlock.getUint32(12, false);\n        iv = prp.encrypt(xor(iv, plainBlock));\n        var dstLastBlockOffset = (nbrOfFullSrcBlocks + 1) * this._byteKeyLength;\n        dstDataView.setUint32(dstLastBlockOffset, this._int32ToUint32(iv[0]), false);\n        dstDataView.setUint32(dstLastBlockOffset + 4, this._int32ToUint32(iv[1]), false);\n        dstDataView.setUint32(dstLastBlockOffset + 8, this._int32ToUint32(iv[2]), false);\n        dstDataView.setUint32(dstLastBlockOffset + 12, this._int32ToUint32(iv[3]), false);\n        resultCallback({ type: 'result', result: new Uint8Array(dstBuffer)});\n    } catch (e) {\n        resultCallback({ type: 'error', msg: \"SjclAes128CbcAsync encrypt error:\" + e.message});\n    }\n};\n\n\n/**\n * @inheritDoc\n */\ntutao.crypto.SjclAes128CbcAsync.prototype.decryptBytes = function (key, bytes, decryptedBytesLength, resultCallback) {\n    try {\n        var xor = sjcl.bitArray._xor4;\n\n        var uint32ArraysPerBlock = this._byteKeyLength / 4;\n        var prp = new sjcl.cipher.aes(key);\n        // iv and padding block are not full blocks\n        var nbrOfFullSrcBlocks = bytes.length / this._byteKeyLength - 2;\n\n        var dstBuffer = new ArrayBuffer(decryptedBytesLength);\n        var srcDataView = new DataView(bytes.buffer);\n        var dstDataView = new DataView(dstBuffer);\n\n        var iv = [];\n        for (var i = 0; i < uint32ArraysPerBlock; i++) {\n            iv.push(srcDataView.getUint32(i * 4, false));\n        }\n        // move the view behind the iv\n        srcDataView = new DataView(bytes.buffer, this._byteKeyLength);\n\n        // decrypt full src blocks\n        var decryptedBlock = null;\n        for (var i = 0; i < ((nbrOfFullSrcBlocks + 1) * uint32ArraysPerBlock); i += uint32ArraysPerBlock) {\n            var encryptedBlock = [srcDataView.getUint32(i * 4, false),\n                srcDataView.getUint32((i + 1) * 4, false),\n                srcDataView.getUint32((i + 2) * 4, false),\n                srcDataView.getUint32((i + 3) * 4, false)];\n            decryptedBlock = xor(iv, prp.decrypt(encryptedBlock));\n            if (i < (nbrOfFullSrcBlocks * uint32ArraysPerBlock)) {\n                dstDataView.setUint32(i * 4, decryptedBlock[0], false);\n                dstDataView.setUint32(i * 4 + 4, decryptedBlock[1], false);\n                dstDataView.setUint32(i * 4 + 8, decryptedBlock[2], false);\n                dstDataView.setUint32(i * 4 + 12, decryptedBlock[3], false);\n                iv = encryptedBlock;\n            } else {\n                var lastSrcBlock = new DataView(new ArrayBuffer(this._byteKeyLength));\n                // copy the decrypted uint32 to the last block\n                for (var a = 0; a < uint32ArraysPerBlock; a++) {\n                    lastSrcBlock.setUint32(a * 4, this._int32ToUint32(decryptedBlock[a]), false);\n                }\n                // check the padding length\n                var nbrOfPaddingBytes = decryptedBlock[3] & 255;\n                if (nbrOfPaddingBytes == 0 || nbrOfPaddingBytes > 16) {\n                    throw new Error(\"invalid padding value: \" + nbrOfPaddingBytes);\n                }\n                if (decryptedBytesLength != ((nbrOfFullSrcBlocks + 1) * this._byteKeyLength - nbrOfPaddingBytes)) {\n                    throw new Error(\"invalid decrypted size: \" + decryptedBytesLength + \", expected: \" + (nbrOfFullSrcBlocks * this._byteKeyLength + nbrOfPaddingBytes));\n                }\n                // copy the remaining bytes\n                var a;\n                for (a = 0; a < (this._byteKeyLength - nbrOfPaddingBytes); a++) {\n                    dstDataView.setUint8(nbrOfFullSrcBlocks * this._byteKeyLength + a, lastSrcBlock.getUint8(a));\n                }\n                // check the padding bytes\n                for (; a < this._byteKeyLength; a++) {\n                    if (lastSrcBlock.getUint8(a) != nbrOfPaddingBytes) {\n                        throw new Error(\"invalid padding byte found: \" + lastSrcBlock.getUint8(a) + \", expected: \" + nbrOfPaddingBytes);\n                    }\n                }\n            }\n        }\n        resultCallback({ type: 'result', result: new Uint8Array(dstBuffer)});\n    } catch (e) {\n        resultCallback({ type: 'error', msg: \"SjclAes128CbcAsync decrypt error: \" + e.message});\n    }\n};\n\ntutao.crypto.SjclAes128CbcAsync.prototype._int32ToUint32 = function (value) {\n    if (value < 0) {\n        return value + 4294967296; // =2^32\n    } else {\n        return value;\n    }\n};\n\n\n\n","\"use strict\";\n\ntutao.provide('tutao.crypto.SjclAes256GcmAsync');\n\n/**\n * @constructor\n *\n * @implements {tutao.crypto.AesInterfaceAsync}\n */\ntutao.crypto.SjclAes256GcmAsync = function() {};\n\n\n/**\n * @inheritDoc\n */\ntutao.crypto.SjclAes256GcmAsync.prototype.encryptBytes = function (key, bytes, randomIv, resultCallback) {\n    try {\n        var paddedBytes = tutao.crypto.Utils.pad(bytes);\n        var words = sjcl.codec.arrayBuffer.toBits(paddedBytes.buffer);\n        var iv = sjcl.codec.arrayBuffer.toBits(randomIv.buffer);\n        var encrypted = sjcl.mode.gcm.encrypt(new sjcl.cipher.aes(key), words, iv, [], tutao.crypto.AesInterface.TAG_BIT_LENGTH);\n        var encryptedWords = sjcl.bitArray.concat(iv, encrypted);\n        resultCallback({type: 'result', result: new Uint8Array(sjcl.codec.arrayBuffer.fromBits(encryptedWords))});\n    } catch(error) {\n        resultCallback({type: 'error', msg : \"SjclAes1256Gcm encryption error: \" + error.message});\n    }\n};\n\n\n/**\n * @inheritDoc\n */\ntutao.crypto.SjclAes256GcmAsync.prototype.decryptBytes = function (key, bytes, decryptedBytesLength, resultCallback) {\n    try {\n        var words = sjcl.codec.arrayBuffer.toBits(bytes.buffer);\n        var iv = sjcl.bitArray.bitSlice(words, 0, tutao.crypto.AesInterface.IV_BIT_LENGTH);\n        var ciphertext = sjcl.bitArray.bitSlice(words, tutao.crypto.AesInterface.IV_BIT_LENGTH);\n        var decrypted = sjcl.mode.gcm.decrypt(new sjcl.cipher.aes(key), ciphertext, iv, [], tutao.crypto.AesInterface.TAG_BIT_LENGTH);\n        var decryptedBytes = new Uint8Array(sjcl.codec.arrayBuffer.fromBits(decrypted));\n        var unpaddedBytes = tutao.crypto.Utils.unpad(decryptedBytes);\n        resultCallback({type: 'result', result: unpaddedBytes});\n    } catch(error) {\n        resultCallback({type: 'error', msg : \"SjclAes1256Gcm decryption error: \" + error.message});\n    }\n};\n"],"sourceRoot":"/source/"}